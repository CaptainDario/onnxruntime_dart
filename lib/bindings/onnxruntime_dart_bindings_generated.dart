// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/onnxruntime/onnxruntime_c_api.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class OnnxruntimeDartBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  OnnxruntimeDartBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  OnnxruntimeDartBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// For historical reasons; programs expect signal's return value to be
  /// defined by <sys/signal.h>.
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t)>>(
          'getpriority');
  late final _getpriority =
      _getpriorityPtr.asFunction<int Function(int, int)>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'getiopolicy_np');
  late final _getiopolicy_np =
      _getiopolicy_npPtr.asFunction<int Function(int, int)>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'getrlimit');
  late final _getrlimit =
      _getrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusagePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rusage>)>>(
      'getrusage');
  late final _getrusage =
      _getrusagePtr.asFunction<int Function(int, ffi.Pointer<rusage>)>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t, ffi.Int)>>(
          'setpriority');
  late final _setpriority =
      _setpriorityPtr.asFunction<int Function(int, int, int)>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'setiopolicy_np');
  late final _setiopolicy_np =
      _setiopolicy_npPtr.asFunction<int Function(int, int, int)>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'setrlimit');
  late final _setrlimit =
      _setrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int wait1(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _wait1(
      arg0,
    );
  }

  late final _wait1Ptr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Pointer<ffi.Int>)>>('wait');
  late final _wait1 =
      _wait1Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpidPtr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int)>>('waitpid');
  late final _waitpid =
      _waitpidPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int>, int)>();

  int waitid(
    idtype_t arg0,
    Dart__uint32_t arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0.value,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, id_t, ffi.Pointer<siginfo_t>,
              ffi.Int)>>('waitid');
  late final _waitid = _waitidPtr
      .asFunction<int Function(int, int, ffi.Pointer<siginfo_t>, int)>();

  int wait3(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<rusage>)>>('wait3');
  late final _wait3 = _wait3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int,
              ffi.Pointer<rusage>)>>('wait4');
  late final _wait4 = _wait4Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  late final ffi.Pointer<ffi.Int> ___mb_cur_max =
      _lookup<ffi.Int>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  /// <malloc/_malloc.h>
  ffi.Pointer<ffi.Void> malloc_type_malloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_malloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, malloc_type_id_t)>>('malloc_type_malloc');
  late final _malloc_type_malloc = _malloc_type_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_calloc(
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_calloc(
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size, malloc_type_id_t)>>('malloc_type_calloc');
  late final _malloc_type_calloc = _malloc_type_callocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  void malloc_type_free(
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_free(
      ptr,
      type_id,
    );
  }

  late final _malloc_type_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, malloc_type_id_t)>>('malloc_type_free');
  late final _malloc_type_free = _malloc_type_freePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> malloc_type_realloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_realloc(
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_realloc');
  late final _malloc_type_realloc = _malloc_type_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_valloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_valloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_vallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, malloc_type_id_t)>>('malloc_type_valloc');
  late final _malloc_type_valloc = _malloc_type_vallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_aligned_alloc(
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_aligned_alloc(
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size,
              malloc_type_id_t)>>('malloc_type_aligned_alloc');
  late final _malloc_type_aligned_alloc = _malloc_type_aligned_allocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  /// rdar://120689514
  int malloc_type_posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> memptr,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_posix_memalign(
      memptr,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_posix_memalign');
  late final _malloc_type_posix_memalign =
      _malloc_type_posix_memalignPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_malloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_malloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_malloc');
  late final _malloc_type_zone_malloc = _malloc_type_zone_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_calloc(
    ffi.Pointer<malloc_zone_t> zone,
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_calloc(
      zone,
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_zone_calloc');
  late final _malloc_type_zone_calloc = _malloc_type_zone_callocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<malloc_zone_t>, int, int, int)>();

  void malloc_type_zone_free(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_zone_free(
      zone,
      ptr,
      type_id,
    );
  }

  late final _malloc_type_zone_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>,
              malloc_type_id_t)>>('malloc_type_zone_free');
  late final _malloc_type_zone_free = _malloc_type_zone_freePtr.asFunction<
      void Function(ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_realloc(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_realloc(
      zone,
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_realloc');
  late final _malloc_type_zone_realloc =
      _malloc_type_zone_reallocPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_valloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_valloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_vallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_valloc');
  late final _malloc_type_zone_valloc = _malloc_type_zone_vallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_memalign(
    ffi.Pointer<malloc_zone_t> zone,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_memalign(
      zone,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_zone_memalign');
  late final _malloc_type_zone_memalign =
      _malloc_type_zone_memalignPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>, int, int, int)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('reallocf');
  late final _reallocf = _reallocfPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  /// rdar://120689514
  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _at_quick_exit(
      arg0,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  double atof(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  /// calloc is now declared in _malloc.h
  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  void exit(
    int arg0,
  ) {
    return _exit(
      arg0,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  /// free is now declared in _malloc.h
  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  /// malloc is now declared in _malloc.h
  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  /// posix_memalign is now declared in _malloc.h
  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void quick_exit(
    int arg0,
  ) {
    return _quick_exit(
      arg0,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  /// realloc is now declared in _malloc.h
  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  double strtod(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int system(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  ffi.Pointer<ffi.Char> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('grantpt');
  late final _grantpt = _grantptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('posix_openpt');
  late final _posix_openpt = _posix_openptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ptsname');
  late final _ptsname =
      _ptsnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Char> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ptsname_r');
  late final _ptsname_r =
      _ptsname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int putenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void setkey(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setkey');
  late final _setkey =
      _setkeyPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('unlockpt');
  late final _unlockpt = _unlockptPtr.asFunction<int Function(int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_addrandom(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('arc4random_addrandom');
  late final _arc4random_addrandom = _arc4random_addrandomPtr
      .asFunction<void Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_bufPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('arc4random_stir');
  late final _arc4random_stir =
      _arc4random_stirPtr.asFunction<void Function()>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  /// getcap(3) functions
  ffi.Pointer<ffi.Char> cgetcap(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('cgetcap');
  late final _cgetcap = _cgetcapPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('cgetclose');
  late final _cgetclose = _cgetclosePtr.asFunction<int Function()>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('cgetent');
  late final _cgetent = _cgetentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetfirst');
  late final _cgetfirst = _cgetfirstPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetmatch(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('cgetmatch');
  late final _cgetmatch = _cgetmatchPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetnext');
  late final _cgetnext = _cgetnextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetnum(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Long> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('cgetnum');
  late final _cgetnum = _cgetnumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Long>)>();

  int cgetset(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'cgetset');
  late final _cgetset =
      _cgetsetPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int cgetstr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetstr');
  late final _cgetstr = _cgetstrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetustr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetustr');
  late final _cgetustr = _cgetustrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devnamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(dev_t, mode_t)>>(
      'devname');
  late final _devname =
      _devnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              dev_t, mode_t, ffi.Pointer<ffi.Char>, ffi.Int)>>('devname_r');
  late final _devname_r = _devname_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> getbsize(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.Long> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>>('getbsize');
  late final _getbsize = _getbsizePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Char> getprogname() {
    return _getprogname();
  }

  late final _getprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getprogname');
  late final _getprogname =
      _getprognamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void setprogname(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setprogname');
  late final _setprogname =
      _setprognamePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('heapsort');
  late final _heapsort = _heapsortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('mergesort');
  late final _mergesort = _mergesortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort');
  late final _psort = _psortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort_r');
  late final _psort_r = _psort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort_r');
  late final _qsort_r = _qsort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('radixsort');
  late final _radixsort = _radixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('sradixsort');
  late final _sradixsort = _sradixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sranddev');
  late final _sranddev = _sranddevPtr.asFunction<void Function()>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('srandomdev');
  late final _srandomdev = _srandomdevPtr.asFunction<void Function()>();

  /// reallocf is now declared in _malloc.h
  int strtonum(
    ffi.Pointer<ffi.Char> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonumPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, ffi.LongLong,
              ffi.LongLong, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtonum');
  late final _strtonum = _strtonumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  /// getsubopt(3) external variable
  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Char>>('suboptarg');

  ffi.Pointer<ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Char> value) => _suboptarg.value = value;

  /// ANSI-C
  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcat(
      __s1,
      __s2,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dst,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strcspn(
      __s,
      __charset,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strpbrk(
      __s,
      __charset,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strspn(
      __s,
      __charset,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strstr(
      __big,
      __little,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
  ) {
    return _strtok(
      __str,
      __sep,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lasts,
  ) {
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __strerrbuf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s1,
  ) {
    return _strdup(
      __s1,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dst,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __s1,
    int __n,
  ) {
    return _strndup(
      __s1,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __s1,
    int __n,
  ) {
    return _strnlen(
      __s1,
      __n,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int memset_s(
    ffi.Pointer<ffi.Void> __s,
    int __smax,
    int __c,
    int __n,
  ) {
    return _memset_s(
      __s,
      __smax,
      __c,
      __n,
    );
  }

  late final _memset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Void>, rsize_t, ffi.Int, rsize_t)>>('memset_s');
  late final _memset_s = _memset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __big,
    int __big_len,
    ffi.Pointer<ffi.Void> __little,
    int __little_len,
  ) {
    return _memmem(
      __big,
      __big_len,
      __little,
      __little_len,
    );
  }

  late final _memmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmem');
  late final _memmem = _memmemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern4(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern4,
    int __len,
  ) {
    return _memset_pattern4(
      __b,
      __pattern4,
      __len,
    );
  }

  late final _memset_pattern4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern4');
  late final _memset_pattern4 = _memset_pattern4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern8(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern8,
    int __len,
  ) {
    return _memset_pattern8(
      __b,
      __pattern8,
      __len,
    );
  }

  late final _memset_pattern8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern8');
  late final _memset_pattern8 = _memset_pattern8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern16(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern16,
    int __len,
  ) {
    return _memset_pattern16(
      __b,
      __pattern16,
      __len,
    );
  }

  late final _memset_pattern16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern16');
  late final _memset_pattern16 = _memset_pattern16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strcasestr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strcasestr(
      __big,
      __little,
    );
  }

  late final _strcasestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasestr');
  late final _strcasestr = _strcasestrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strnstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
    int __len,
  ) {
    return _strnstr(
      __big,
      __little,
      __len,
    );
  }

  late final _strnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strnstr');
  late final _strnstr = _strnstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcat(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __source,
    int __size,
  ) {
    return _strlcat(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __source,
    int __size,
  ) {
    return _strlcpy(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void strmode(
    int __mode,
    ffi.Pointer<ffi.Char> __bp,
  ) {
    return _strmode(
      __mode,
      __bp,
    );
  }

  late final _strmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('strmode');
  late final _strmode =
      _strmodePtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  /// SUS places swab() in unistd.h.  It is listed here for source compatibility
  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ssize_t)>>('swab');
  late final _swab = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> __b1,
    ffi.Pointer<ffi.Void> __b2,
    int __len,
  ) {
    return _timingsafe_bcmp(
      __b1,
      __b2,
      __len,
    );
  }

  late final _timingsafe_bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('timingsafe_bcmp');
  late final _timingsafe_bcmp = _timingsafe_bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int strsignal_r(
    int __sig,
    ffi.Pointer<ffi.Char> __strsignalbuf,
    int __buflen,
  ) {
    return _strsignal_r(
      __sig,
      __strsignalbuf,
      __buflen,
    );
  }

  late final _strsignal_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strsignal_r');
  late final _strsignal_r = _strsignal_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int bcmp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcopy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _bzero(
      arg0,
      arg1,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _index(
      arg0,
      arg1,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _rindex(
      arg0,
      arg1,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int arg0,
  ) {
    return _ffs(
      arg0,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _strcasecmp(
      arg0,
      arg1,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _strncasecmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int ffsl(
    int arg0,
  ) {
    return _ffsl(
      arg0,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int arg0,
  ) {
    return _ffsll(
      arg0,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int fls(
    int arg0,
  ) {
    return _fls(
      arg0,
    );
  }

  late final _flsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fls');
  late final _fls = _flsPtr.asFunction<int Function(int)>();

  int flsl(
    int arg0,
  ) {
    return _flsl(
      arg0,
    );
  }

  late final _flslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('flsl');
  late final _flsl = _flslPtr.asFunction<int Function(int)>();

  int flsll(
    int arg0,
  ) {
    return _flsll(
      arg0,
    );
  }

  late final _flsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('flsll');
  late final _flsll = _flsllPtr.asFunction<int Function(int)>();

  /// \brief The Onnxruntime library's entry point to access the C API
  ///
  /// Call this to get the a pointer to an ::OrtApiBase
  ffi.Pointer<OrtApiBase> OrtGetApiBase() {
    return _OrtGetApiBase();
  }

  late final _OrtGetApiBasePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OrtApiBase> Function()>>(
          'OrtGetApiBase');
  late final _OrtGetApiBase =
      _OrtGetApiBasePtr.asFunction<ffi.Pointer<OrtApiBase> Function()>();

  OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_CUDA(
    ffi.Pointer<OrtSessionOptions> options,
    int device_id,
  ) {
    return _OrtSessionOptionsAppendExecutionProvider_CUDA(
      options,
      device_id,
    );
  }

  late final _OrtSessionOptionsAppendExecutionProvider_CUDAPtr = _lookup<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>,
              ffi.Int)>>('OrtSessionOptionsAppendExecutionProvider_CUDA');
  late final _OrtSessionOptionsAppendExecutionProvider_CUDA =
      _OrtSessionOptionsAppendExecutionProvider_CUDAPtr.asFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, int)>();

  OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_ROCM(
    ffi.Pointer<OrtSessionOptions> options,
    int device_id,
  ) {
    return _OrtSessionOptionsAppendExecutionProvider_ROCM(
      options,
      device_id,
    );
  }

  late final _OrtSessionOptionsAppendExecutionProvider_ROCMPtr = _lookup<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>,
              ffi.Int)>>('OrtSessionOptionsAppendExecutionProvider_ROCM');
  late final _OrtSessionOptionsAppendExecutionProvider_ROCM =
      _OrtSessionOptionsAppendExecutionProvider_ROCMPtr.asFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, int)>();

  OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_MIGraphX(
    ffi.Pointer<OrtSessionOptions> options,
    int device_id,
  ) {
    return _OrtSessionOptionsAppendExecutionProvider_MIGraphX(
      options,
      device_id,
    );
  }

  late final _OrtSessionOptionsAppendExecutionProvider_MIGraphXPtr = _lookup<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>,
              ffi.Int)>>('OrtSessionOptionsAppendExecutionProvider_MIGraphX');
  late final _OrtSessionOptionsAppendExecutionProvider_MIGraphX =
      _OrtSessionOptionsAppendExecutionProvider_MIGraphXPtr.asFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, int)>();

  OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_Dnnl(
    ffi.Pointer<OrtSessionOptions> options,
    int use_arena,
  ) {
    return _OrtSessionOptionsAppendExecutionProvider_Dnnl(
      options,
      use_arena,
    );
  }

  late final _OrtSessionOptionsAppendExecutionProvider_DnnlPtr = _lookup<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>,
              ffi.Int)>>('OrtSessionOptionsAppendExecutionProvider_Dnnl');
  late final _OrtSessionOptionsAppendExecutionProvider_Dnnl =
      _OrtSessionOptionsAppendExecutionProvider_DnnlPtr.asFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, int)>();

  OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_Tensorrt(
    ffi.Pointer<OrtSessionOptions> options,
    int device_id,
  ) {
    return _OrtSessionOptionsAppendExecutionProvider_Tensorrt(
      options,
      device_id,
    );
  }

  late final _OrtSessionOptionsAppendExecutionProvider_TensorrtPtr = _lookup<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>,
              ffi.Int)>>('OrtSessionOptionsAppendExecutionProvider_Tensorrt');
  late final _OrtSessionOptionsAppendExecutionProvider_Tensorrt =
      _OrtSessionOptionsAppendExecutionProvider_TensorrtPtr.asFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, int)>();

  /// Key for disable PrePacking,
  /// If the config value is set to "1" then the prepacking is disabled, otherwise prepacking is enabled (default value)
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigDisablePrepacking =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsConfigDisablePrepacking');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsConfigDisablePrepacking =>
      _kOrtSessionOptionsConfigDisablePrepacking.value;

  /// A value of "1" means allocators registered in the env will be used. "0" means the allocators created in the session
  /// will be used. Use this to override the usage of env allocators on a per session level.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigUseEnvAllocators =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsConfigUseEnvAllocators');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsConfigUseEnvAllocators =>
      _kOrtSessionOptionsConfigUseEnvAllocators.value;

  /// Set to 'ORT' (case sensitive) to load an ORT format model.
  /// If unset, model type will default to ONNX unless inferred from filename ('.ort' == ORT format) or bytes to be ORT
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigLoadModelFormat =
      _lookup<ffi.Pointer<ffi.Char>>('kOrtSessionOptionsConfigLoadModelFormat');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsConfigLoadModelFormat =>
      _kOrtSessionOptionsConfigLoadModelFormat.value;

  /// Set to 'ORT' (case sensitive) to save optimized model in ORT format when SessionOptions.optimized_model_path is set.
  /// If unset, format will default to ONNX unless optimized_model_filepath ends in '.ort'.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigSaveModelFormat =
      _lookup<ffi.Pointer<ffi.Char>>('kOrtSessionOptionsConfigSaveModelFormat');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsConfigSaveModelFormat =>
      _kOrtSessionOptionsConfigSaveModelFormat.value;

  /// If a value is "1", flush-to-zero and denormal-as-zero are applied. The default is "0".
  /// When multiple sessions are created, a main thread doesn't override changes from succeeding session options,
  /// but threads in session thread pools follow option changes.
  /// When ORT runs with OpenMP, the same rule is applied, i.e. the first session option to flush-to-zero and
  /// denormal-as-zero is only applied to global OpenMP thread pool, which doesn't support per-session thread pool.
  /// Note that an alternative way not using this option at runtime is to train and export a model without denormals
  /// and that's recommended because turning this option on may hurt model accuracy.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigSetDenormalAsZero =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsConfigSetDenormalAsZero');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsConfigSetDenormalAsZero =>
      _kOrtSessionOptionsConfigSetDenormalAsZero.value;

  /// It controls to run quantization model in QDQ (QuantizelinearDeQuantizelinear) format or not.
  /// "0": enable. ORT does fusion logic for QDQ format.
  /// "1": disable. ORT doesn't do fusion logic for QDQ format.
  /// Its default value is "0" unless the DirectML execution provider is registered, in which case it defaults to "1".
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsDisableQuantQDQ =
      _lookup<ffi.Pointer<ffi.Char>>('kOrtSessionOptionsDisableQuantQDQ');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsDisableQuantQDQ =>
      _kOrtSessionOptionsDisableQuantQDQ.value;

  /// It controls whether to enable Double QDQ remover and Identical Children Consolidation
  /// "0": not to disable. ORT does remove the middle 2 Nodes from a Q->(QD->Q)->QD pairs
  /// "1": disable. ORT doesn't remove the middle 2 Nodes from a Q->(QD->Q)->QD pairs
  /// Its default value is "0"
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsDisableDoubleQDQRemover =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsDisableDoubleQDQRemover');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsDisableDoubleQDQRemover =>
      _kOrtSessionOptionsDisableDoubleQDQRemover.value;

  /// If set to "1", enables the removal of QuantizeLinear/DequantizeLinear node pairs once all QDQ handling has been
  /// completed. e.g. If after all QDQ handling has completed and we have -> FloatOp -> Q -> DQ -> FloatOp -> the
  /// Q -> DQ could potentially be removed. This will provide a performance benefit by avoiding going from float to
  /// 8-bit and back to float, but could impact accuracy. The impact on accuracy will be model specific and depend on
  /// other factors like whether the model was created using Quantization Aware Training or Post Training Quantization.
  /// As such, it's best to test to determine if enabling this works well for your scenario.
  /// The default value is "0"
  /// Available since version 1.11.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsEnableQuantQDQCleanup =
      _lookup<ffi.Pointer<ffi.Char>>('kOrtSessionOptionsEnableQuantQDQCleanup');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsEnableQuantQDQCleanup =>
      _kOrtSessionOptionsEnableQuantQDQCleanup.value;

  /// Enable or disable gelu approximation in graph optimization. "0": disable; "1": enable. The default is "0".
  /// GeluApproximation has side effects which may change the inference results. It is disabled by default due to this.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsEnableGeluApproximation =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsEnableGeluApproximation');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsEnableGeluApproximation =>
      _kOrtSessionOptionsEnableGeluApproximation.value;

  /// This setting controls whether to enable AheadOfTime function inlining.
  /// AOT function inlining examines the graph and attempts to inline as many locally defined functions in the model
  /// as possible with the help of enabled execution providers.
  /// This can reduce the number of function calls and improve performance because it is done before
  /// Level1 optimizers and constant folding. However, under some circumstances, when the EPs are not available,
  /// one can disable the AOT inlining, produce an optimized model and postpone AOT until run time.
  /// "0": enable; "1": disable.
  /// Its default value is "0".
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsDisableAheadOfTimeFunctionInlining =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsDisableAheadOfTimeFunctionInlining');

  ffi.Pointer<ffi.Char>
      get kOrtSessionOptionsDisableAheadOfTimeFunctionInlining =>
          _kOrtSessionOptionsDisableAheadOfTimeFunctionInlining.value;

  /// This setting if set should contain a comma separated list of optimizers names that should be disabled.
  /// Optimizers may take time to execute and affect model loading time. If you feel that a specific optimizer
  /// does not provider runtime benefits, but affects your model loading time you may disable it using this config
  /// entry. This option is not enabled in ORT_MINIMAL_BUILD build.
  /// A list of optimizes is available in onnxruntime/core/optimizer/graph_transformer_utils.cc
  ///
  /// Default is an empty string which means no optimizers are disabled.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsDisableSpecifiedOptimizers =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsDisableSpecifiedOptimizers');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsDisableSpecifiedOptimizers =>
      _kOrtSessionOptionsDisableSpecifiedOptimizers.value;

  /// Enable or disable using device allocator for allocating initialized tensor memory. "1": enable; "0": disable. The default is "0".
  /// Using device allocators means the memory allocation is made using malloc/new.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsUseDeviceAllocatorForInitializers =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsUseDeviceAllocatorForInitializers');

  ffi.Pointer<ffi.Char>
      get kOrtSessionOptionsUseDeviceAllocatorForInitializers =>
          _kOrtSessionOptionsUseDeviceAllocatorForInitializers.value;

  /// Configure whether to allow the inter_op/intra_op threads spinning a number of times before blocking
  /// "0": thread will block if found no job to run
  /// "1": default, thread will spin a number of times before blocking
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigAllowInterOpSpinning =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsConfigAllowInterOpSpinning');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsConfigAllowInterOpSpinning =>
      _kOrtSessionOptionsConfigAllowInterOpSpinning.value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigAllowIntraOpSpinning =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsConfigAllowIntraOpSpinning');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsConfigAllowIntraOpSpinning =>
      _kOrtSessionOptionsConfigAllowIntraOpSpinning.value;

  /// Key for using model bytes directly for ORT format
  /// If a session is created using an input byte array contains the ORT format model data,
  /// By default we will copy the model bytes at the time of session creation to ensure the model bytes
  /// buffer is valid.
  /// Setting this option to "1" will disable copy the model bytes, and use the model bytes directly. The caller
  /// has to guarantee that the model bytes are valid until the ORT session using the model bytes is destroyed.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigUseORTModelBytesDirectly =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsConfigUseORTModelBytesDirectly');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsConfigUseORTModelBytesDirectly =>
      _kOrtSessionOptionsConfigUseORTModelBytesDirectly.value;

  /// <summary>
  /// Key for using the ORT format model flatbuffer bytes directly for initializers.
  /// This avoids copying the bytes and reduces peak memory usage during model loading and initialization.
  /// Requires `session.use_ort_model_bytes_directly` to be true.
  /// If set, the flatbuffer bytes provided when creating the InferenceSession MUST remain valid for the entire
  /// duration of the InferenceSession.
  /// </summary>
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigUseORTModelBytesForInitializers =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsConfigUseORTModelBytesForInitializers');

  ffi.Pointer<ffi.Char>
      get kOrtSessionOptionsConfigUseORTModelBytesForInitializers =>
          _kOrtSessionOptionsConfigUseORTModelBytesForInitializers.value;

  /// This should only be specified when exporting an ORT format model for use on a different platform.
  /// If the ORT format model will be used on ARM platforms set to "1". For other platforms set to "0"
  /// Available since version 1.11.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsQDQIsInt8Allowed =
      _lookup<ffi.Pointer<ffi.Char>>('kOrtSessionOptionsQDQIsInt8Allowed');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsQDQIsInt8Allowed =>
      _kOrtSessionOptionsQDQIsInt8Allowed.value;

  /// x64 SSE4.1/AVX2/AVX512(with no VNNI) has overflow problem with quantizied matrix multiplication with U8S8.
  /// To avoid this we need to use slower U8U8 matrix multiplication instead. This option, if
  /// turned on, use slower U8U8 matrix multiplications. Only effective with AVX2 or AVX512
  /// platforms.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsAvx2PrecisionMode =
      _lookup<ffi.Pointer<ffi.Char>>('kOrtSessionOptionsAvx2PrecisionMode');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsAvx2PrecisionMode =>
      _kOrtSessionOptionsAvx2PrecisionMode.value;

  /// Specifies how minimal build graph optimizations are handled in a full build.
  /// These optimizations are at the extended level or higher.
  /// Possible values and their effects are:
  /// "save": Save runtime optimizations when saving an ORT format model.
  /// "apply": Only apply optimizations available in a minimal build.
  /// ""/<unspecified>: Apply optimizations available in a full build.
  /// Available since version 1.11.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigMinimalBuildOptimizations =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsConfigMinimalBuildOptimizations');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsConfigMinimalBuildOptimizations =>
      _kOrtSessionOptionsConfigMinimalBuildOptimizations.value;

  /// Specifies a list of stop op types. Nodes of a type in the stop op types and nodes downstream from them will not be
  /// run by the NNAPI EP.
  /// The value should be a ","-delimited list of op types. For example, "Add,Sub".
  /// If not specified, the default set of stop ops is used. To specify an empty stop ops types list and disable stop op
  /// exclusion, set the value to "".
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigNnapiEpPartitioningStopOps =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsConfigNnapiEpPartitioningStopOps');

  ffi.Pointer<ffi.Char>
      get kOrtSessionOptionsConfigNnapiEpPartitioningStopOps =>
          _kOrtSessionOptionsConfigNnapiEpPartitioningStopOps.value;

  /// Enabling dynamic block-sizing for multithreading.
  /// With a positive value, thread pool will split a task of N iterations to blocks of size starting from:
  /// N / (num_of_threads * dynamic_block_base)
  /// As execution progresses, the size will decrease according to the diminishing residual of N,
  /// meaning the task will be distributed in smaller granularity for better parallelism.
  /// For some models, it helps to reduce the variance of E2E inference latency and boost performance.
  /// The feature will not function by default, specify any positive integer, e.g. "4", to enable it.
  /// Available since version 1.11.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigDynamicBlockBase =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsConfigDynamicBlockBase');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsConfigDynamicBlockBase =>
      _kOrtSessionOptionsConfigDynamicBlockBase.value;

  /// This option allows to decrease CPU usage between infrequent
  /// requests and forces any TP threads spinning stop immediately when the last of
  /// concurrent Run() call returns.
  /// Spinning is restarted on the next Run() call.
  /// Applies only to internal thread-pools
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigForceSpinningStop =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsConfigForceSpinningStop');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsConfigForceSpinningStop =>
      _kOrtSessionOptionsConfigForceSpinningStop.value;

  /// "1": all inconsistencies encountered during shape and type inference
  /// will result in failures.
  /// "0": in some cases warnings will be logged but processing will continue. The default.
  /// May be useful to expose bugs in models.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigStrictShapeTypeInference =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsConfigStrictShapeTypeInference');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsConfigStrictShapeTypeInference =>
      _kOrtSessionOptionsConfigStrictShapeTypeInference.value;

  /// "1": every model using a more recent opset than the latest released one will fail
  /// "0": the model may or may not work if onnxruntime cannot find an implementation, this option
  /// is used for development purpose.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigStrictAllowReleasedOpsetsOnly =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsConfigStrictAllowReleasedOpsetsOnly');

  ffi.Pointer<ffi.Char>
      get kOrtSessionOptionsConfigStrictAllowReleasedOpsetsOnly =>
          _kOrtSessionOptionsConfigStrictAllowReleasedOpsetsOnly.value;

  /// The file saves configuration for partitioning node among logic streams
  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _kNodePartitionConfigFile =
      _lookup<ffi.Pointer<ffi.Char>>('kNodePartitionConfigFile');

  ffi.Pointer<ffi.Char> get kNodePartitionConfigFile =>
      _kNodePartitionConfigFile.value;

  /// This Option allows setting affinities for intra op threads.
  /// Affinity string follows format:
  /// logical_processor_id,logical_processor_id;logical_processor_id,logical_processor_id
  /// Semicolon isolates configurations among threads, while comma split processors where ith thread expected to attach to.
  /// e.g.1,2,3;4,5
  /// specifies affinities for two threads, with the 1st thread attach to the 1st, 2nd, and 3rd processor, and 2nd thread to the 4th and 5th.
  /// To ease the configuration, an "interval" is also allowed:
  /// e.g. 1-8;8-16;17-24
  /// orders that the 1st thread runs on first eight processors, 2nd thread runs on next eight processors, and so forth.
  /// Note:
  /// 1. Once set, the number of thread affinities must equal to intra_op_num_threads - 1, since ort does not set affinity on the main thread which
  /// is started and managed by the calling app;
  /// 2. For windows, ort will infer the group id from a logical processor id, for example, assuming there are two groups with each has 64 logical processors,
  /// an id of 64 will be inferred as the last processor of the 1st group, while 65 will be interpreted as the 1st processor of the second group.
  /// Hence 64-65 is an invalid configuration, because a windows thread cannot be attached to processors across group boundary.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsConfigIntraOpThreadAffinities =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsConfigIntraOpThreadAffinities');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsConfigIntraOpThreadAffinities =>
      _kOrtSessionOptionsConfigIntraOpThreadAffinities.value;

  /// This option will dump out the model to assist debugging any issues with layout transformation,
  /// and is primarily intended for developer usage. It is only relevant if an execution provider that requests
  /// NHWC layout is enabled such as NNAPI, XNNPACK or QNN.
  ///
  /// Default is off. Set to "1" to enable.
  ///
  /// If modified by layout transformation the model will be dumped after these steps:
  /// 1) insertion of the layout transformation Transpose nodes
  /// 2) after those are optimized using the transpose optimizer,
  /// 3) after the L1 transformers are applied to the updated graph.
  /// The model will be saved to filename post_layout_transform_step_<step_number>.onnx.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _kDebugLayoutTransformation =
      _lookup<ffi.Pointer<ffi.Char>>('kDebugLayoutTransformation');

  ffi.Pointer<ffi.Char> get kDebugLayoutTransformation =>
      _kDebugLayoutTransformation.value;

  /// Graph nodes that are not supported by the execution providers (EPs) explicitly added to the session are
  /// assigned (i.e., "fallback") to the CPU EP by default.
  ///
  /// This option allows the user to disable the fallback of unsupported graph nodes to the CPU EP.
  /// If this option is set to "1", session creation will fail if the execution providers other than the CPU EP cannot
  /// fully support all of the nodes in the graph.
  ///
  /// It is invalid to set this option and explicitly add the CPU EP to the session. In this case, session creation
  /// will also fail with an error.
  ///
  /// Option values:
  /// - "0": CPU EP fallback is not disabled. [DEFAULT]
  /// - "1": CPU EP fallback is disabled.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsDisableCPUEPFallback =
      _lookup<ffi.Pointer<ffi.Char>>('kOrtSessionOptionsDisableCPUEPFallback');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsDisableCPUEPFallback =>
      _kOrtSessionOptionsDisableCPUEPFallback.value;

  /// Use this config when serializing a large model after optimization to specify an external initializers file
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsOptimizedModelExternalInitializersFileName =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsOptimizedModelExternalInitializersFileName');

  ffi.Pointer<ffi.Char>
      get kOrtSessionOptionsOptimizedModelExternalInitializersFileName =>
          _kOrtSessionOptionsOptimizedModelExternalInitializersFileName.value;

  /// Use this config to control the minimum size of the initializer when externalizing it during serialization
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsOptimizedModelExternalInitializersMinSizeInBytes =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsOptimizedModelExternalInitializersMinSizeInBytes');

  ffi.Pointer<ffi.Char>
      get kOrtSessionOptionsOptimizedModelExternalInitializersMinSizeInBytes =>
          _kOrtSessionOptionsOptimizedModelExternalInitializersMinSizeInBytes
              .value;

  /// Enable EP context feature to dump the partitioned graph which includes the EP context into Onnx file.
  /// The dumped Onnx model with EP context can be used for future inference to avoid the EP graph partitioning/compile overhead.
  /// "0": disable. (default)
  /// "1": enable.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionEpContextEnable =
      _lookup<ffi.Pointer<ffi.Char>>('kOrtSessionOptionEpContextEnable');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionEpContextEnable =>
      _kOrtSessionOptionEpContextEnable.value;

  /// Specify the file path for the Onnx model which has EP context.
  /// Default to original_file_name_ctx.onnx if not specified
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionEpContextFilePath =
      _lookup<ffi.Pointer<ffi.Char>>('kOrtSessionOptionEpContextFilePath');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionEpContextFilePath =>
      _kOrtSessionOptionEpContextFilePath.value;

  /// Flag to specify whether to dump the EP context into the Onnx model.
  /// "0": dump the EP context into separate file, keep the file name in the Onnx model. (default).
  /// "1": dump the EP context into the Onnx model.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionEpContextEmbedMode =
      _lookup<ffi.Pointer<ffi.Char>>('kOrtSessionOptionEpContextEmbedMode');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionEpContextEmbedMode =>
      _kOrtSessionOptionEpContextEmbedMode.value;

  /// Specify the EPContext node name prefix to make it unique
  /// in case user need to merge/connect multiple EPContext nodes in one model
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionEpContextNodeNamePrefix =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionEpContextNodeNamePrefix');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionEpContextNodeNamePrefix =>
      _kOrtSessionOptionEpContextNodeNamePrefix.value;

  /// Share EP related resources across EPs
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionShareEpContexts =
      _lookup<ffi.Pointer<ffi.Char>>('kOrtSessionOptionShareEpContexts');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionShareEpContexts =>
      _kOrtSessionOptionShareEpContexts.value;

  /// Gemm fastmath mode provides fp32 gemm acceleration with bfloat16 based matmul.
  /// Option values:
  /// - "0": Gemm FastMath mode is not enabled. [DEFAULT]
  /// - "1": Gemm FastMath mode is enabled.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsMlasGemmFastMathArm64Bfloat16 =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsMlasGemmFastMathArm64Bfloat16');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsMlasGemmFastMathArm64Bfloat16 =>
      _kOrtSessionOptionsMlasGemmFastMathArm64Bfloat16.value;

  /// When converting DQ + MatMul -> MatMulNBits, the accuracy level of the MatMulNBits is controlled by this option.
  /// Refer to MatMulNBits op schema for more details.
  /// If not provided, default is 4.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtSessionOptionsQDQMatMulNBitsAccuracyLevel =
      _lookup<ffi.Pointer<ffi.Char>>(
          'kOrtSessionOptionsQDQMatMulNBitsAccuracyLevel');

  ffi.Pointer<ffi.Char> get kOrtSessionOptionsQDQMatMulNBitsAccuracyLevel =>
      _kOrtSessionOptionsQDQMatMulNBitsAccuracyLevel.value;

  /// THIS OPTION IS NOT A REGULAR SESSION OPTION SINCE IT CAN BE MODIFIED AT ANY TIME
  /// Meant to be used with SetEpDynamicOptions
  /// Specify the type of workload for this session.
  /// “Default”: OS determines the scheduling priority and processor performance to service this workload. [Default]
  /// “Efficient”: OS treats this workload is efficiency oriented with low scheduling priority and efficient processor performance.
  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
      _kOrtEpDynamicOptionsWorkloadType =
      _lookup<ffi.Pointer<ffi.Char>>('kOrtEpDynamicOptionsWorkloadType');

  ffi.Pointer<ffi.Char> get kOrtEpDynamicOptionsWorkloadType =>
      _kOrtEpDynamicOptionsWorkloadType.value;
}

/// mbstate_t is an opaque object to keep conversion state, during multibyte
/// stream conversions.  The content must not be referenced by user programs.
final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  /// for alignment
  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  /// Routine to call
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  /// Argument to pass
  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

/// [XSI] The type idtype_t shall be defined as an enumeration type whose
/// possible values shall include at least P_ALL, P_PID, and P_PGID.
enum idtype_t {
  P_ALL(0),
  P_PID(1),
  P_PGID(2);

  final int value;
  const idtype_t(this.value);

  static idtype_t fromValue(int value) => switch (value) {
        0 => P_ALL,
        1 => P_PID,
        2 => P_PGID,
        _ => throw ArgumentError("Unknown value for idtype_t: $value"),
      };
}

final class __darwin_arm_exception_state extends ffi.Struct {
  /// number of arm exception taken
  @__uint32_t()
  external int __exception;

  /// Fault status
  @__uint32_t()
  external int __fsr;

  /// Virtual Fault Address
  @__uint32_t()
  external int __far;
}

typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;

final class __darwin_arm_exception_state64 extends ffi.Struct {
  /// Virtual Fault Address
  @__uint64_t()
  external int __far;

  /// Exception syndrome
  @__uint32_t()
  external int __esr;

  /// number of arm exception taken
  @__uint32_t()
  external int __exception;
}

typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;

final class __darwin_arm_exception_state64_v2 extends ffi.Struct {
  /// Virtual Fault Address
  @__uint64_t()
  external int __far;

  /// Exception syndrome
  @__uint64_t()
  external int __esr;
}

final class __darwin_arm_thread_state extends ffi.Struct {
  /// General purpose register r0-r12
  @ffi.Array.multi([13])
  external ffi.Array<__uint32_t> __r;

  /// Stack pointer r13
  @__uint32_t()
  external int __sp;

  /// Link register r14
  @__uint32_t()
  external int __lr;

  /// Program counter r15
  @__uint32_t()
  external int __pc;

  /// Current program status register
  @__uint32_t()
  external int __cpsr;
}

final class __darwin_arm_thread_state64 extends ffi.Struct {
  /// General purpose registers x0-x28
  @ffi.Array.multi([29])
  external ffi.Array<__uint64_t> __x;

  /// Frame pointer x29
  @__uint64_t()
  external int __fp;

  /// Link register x30
  @__uint64_t()
  external int __lr;

  /// Stack pointer x31
  @__uint64_t()
  external int __sp;

  /// Program counter
  @__uint64_t()
  external int __pc;

  /// Current program status register
  @__uint32_t()
  external int __cpsr;

  /// Same size for 32-bit or 64-bit clients
  @__uint32_t()
  external int __pad;
}

final class __darwin_arm_vfp_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __fpscr;
}

final class __darwin_arm_neon_state64 extends ffi.Opaque {}

final class __darwin_arm_neon_state extends ffi.Opaque {}

final class __arm_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

final class __arm_legacy_debug_state extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;
}

final class __darwin_arm_debug_state32 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;

  /// Bit 0 is SS (Hardware Single Step)
  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_debug_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wcr;

  /// Bit 0 is SS (Hardware Single Step)
  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

final class __darwin_mcontext32 extends ffi.Struct {
  external __darwin_arm_exception_state __es;

  external __darwin_arm_thread_state __ss;

  external __darwin_arm_vfp_state __fs;
}

final class __darwin_mcontext64 extends ffi.Opaque {}

final class __darwin_sigaltstack extends ffi.Struct {
  /// signal stack base
  external ffi.Pointer<ffi.Void> ss_sp;

  /// signal stack length
  @__darwin_size_t()
  external int ss_size;

  /// SA_DISABLE and/or SA_ONSTACK
  @ffi.Int()
  external int ss_flags;
}

typedef __darwin_size_t = ffi.UnsignedLong;
typedef Dart__darwin_size_t = int;

final class __darwin_ucontext extends ffi.Struct {
  @ffi.Int()
  external int uc_onstack;

  /// signal mask used by this context
  @__darwin_sigset_t()
  external int uc_sigmask;

  /// stack used by this context
  external __darwin_sigaltstack uc_stack;

  /// pointer to resuming context
  external ffi.Pointer<__darwin_ucontext> uc_link;

  /// size of the machine context passed in
  @__darwin_size_t()
  external int uc_mcsize;

  /// pointer to machine specific context
  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

typedef __darwin_sigset_t = __uint32_t;

final class sigval extends ffi.Union {
  /// Members as suggested by Annex C of POSIX 1003.1b.
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class sigevent extends ffi.Struct {
  /// Notification type
  @ffi.Int()
  external int sigev_notify;

  /// Signal number
  @ffi.Int()
  external int sigev_signo;

  /// Signal value
  external sigval sigev_value;

  /// Notification function
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>>
      sigev_notify_function;

  /// Notification attributes
  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;

final class __siginfo extends ffi.Struct {
  /// signal number
  @ffi.Int()
  external int si_signo;

  /// errno association
  @ffi.Int()
  external int si_errno;

  /// signal code
  @ffi.Int()
  external int si_code;

  /// sending process
  @pid_t()
  external int si_pid;

  /// sender's ruid
  @uid_t()
  external int si_uid;

  /// exit value
  @ffi.Int()
  external int si_status;

  /// faulting instruction
  external ffi.Pointer<ffi.Void> si_addr;

  /// signal value
  external sigval si_value;

  /// band event for SIGPOLL
  @ffi.Long()
  external int si_band;

  /// Reserved for Future Use
  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;

/// union for signal handlers
final class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      __sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

/// Signal vector template for Kernel user boundary
final class __sigaction extends ffi.Struct {
  /// signal handler
  external __sigaction_u __sigaction_u1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  /// signal mask to apply
  @sigset_t()
  external int sa_mask;

  /// see signal options below
  @ffi.Int()
  external int sa_flags;
}

typedef siginfo_t = __siginfo;
typedef sigset_t = __darwin_sigset_t;

/// Signal vector "template" used in sigaction call.
final class sigaction extends ffi.Struct {
  /// signal handler
  external __sigaction_u __sigaction_u1;

  /// signal mask to apply
  @sigset_t()
  external int sa_mask;

  /// see signal options below
  @ffi.Int()
  external int sa_flags;
}

/// 4.3 compatibility:
/// Signal vector "template" used in sigvec call.
final class sigvec extends ffi.Struct {
  /// signal handler
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      sv_handler;

  /// signal mask to apply
  @ffi.Int()
  external int sv_mask;

  /// see signal options below
  @ffi.Int()
  external int sv_flags;
}

/// Structure used in sigstack call.
final class sigstack extends ffi.Struct {
  /// signal stack pointer
  external ffi.Pointer<ffi.Char> ss_sp;

  /// current status
  @ffi.Int()
  external int ss_onstack;
}

final class timeval extends ffi.Struct {
  /// seconds
  @__darwin_time_t()
  external int tv_sec;

  /// and microseconds
  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;
typedef __darwin_suseconds_t = __int32_t;

/// A structure representing an accounting of resource utilization.  The
/// address of an instance of this structure is the second parameter to
/// getrusage().
///
/// Note: All values other than ru_utime and ru_stime are implementaiton
/// defined and subject to change in a future release.  Their use
/// is discouraged for standards compliant programs.
final class rusage extends ffi.Struct {
  /// user time used (PL)
  external timeval ru_utime;

  /// system time used (PL)
  external timeval ru_stime;

  /// max resident set size (PL)
  @ffi.Long()
  external int ru_maxrss;

  /// integral shared memory size (NU)
  @ffi.Long()
  external int ru_ixrss;

  /// integral unshared data (NU)
  @ffi.Long()
  external int ru_idrss;

  /// integral unshared stack (NU)
  @ffi.Long()
  external int ru_isrss;

  /// page reclaims (NU)
  @ffi.Long()
  external int ru_minflt;

  /// page faults (NU)
  @ffi.Long()
  external int ru_majflt;

  /// swaps (NU)
  @ffi.Long()
  external int ru_nswap;

  /// block input operations (atomic)
  @ffi.Long()
  external int ru_inblock;

  /// block output operations (atomic)
  @ffi.Long()
  external int ru_oublock;

  /// messages sent (atomic)
  @ffi.Long()
  external int ru_msgsnd;

  /// messages received (atomic)
  @ffi.Long()
  external int ru_msgrcv;

  /// signals received (atomic)
  @ffi.Long()
  external int ru_nsignals;

  /// voluntary context switches (atomic)
  @ffi.Long()
  external int ru_nvcsw;

  /// involuntary "
  @ffi.Long()
  external int ru_nivcsw;
}

final class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

final class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

final class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

final class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

final class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

final class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

final class rusage_info_v6 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;

  @ffi.Uint64()
  external int ri_user_ptime;

  @ffi.Uint64()
  external int ri_system_ptime;

  @ffi.Uint64()
  external int ri_pinstructions;

  @ffi.Uint64()
  external int ri_pcycles;

  @ffi.Uint64()
  external int ri_energy_nj;

  @ffi.Uint64()
  external int ri_penergy_nj;

  @ffi.Uint64()
  external int ri_secure_time_in_system;

  @ffi.Uint64()
  external int ri_secure_ptime_in_system;

  @ffi.Uint64()
  external int ri_neural_footprint;

  @ffi.Uint64()
  external int ri_lifetime_max_neural_footprint;

  @ffi.Uint64()
  external int ri_interval_max_neural_footprint;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Uint64> ri_reserved;
}

/// A structure representing a resource limit.  The address of an instance
/// of this structure is the second parameter to getrlimit()/setrlimit().
final class rlimit extends ffi.Struct {
  /// current (soft) limit
  @rlim_t()
  external int rlim_cur;

  /// maximum value for rlim_cur
  @rlim_t()
  external int rlim_max;
}

/// Resource limit type (low 63 bits, excluding the sign bit)
typedef rlim_t = __uint64_t;

final class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

typedef id_t = __darwin_id_t;
typedef __darwin_id_t = __uint32_t;

/// Deprecated:
/// Structure of the information in the status word returned by wait4.
/// If w_stopval==_WSTOPPED, then the second structure describes
/// the information returned, else the first.
final class wait extends ffi.Opaque {}

final class div_t extends ffi.Struct {
  /// quotient
  @ffi.Int()
  external int quot;

  /// remainder
  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  /// quotient
  @ffi.Long()
  external int quot;

  /// remainder
  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef malloc_type_id_t = ffi.UnsignedLongLong;
typedef Dartmalloc_type_id_t = int;

final class _malloc_zone_t extends ffi.Opaque {}

/// <malloc/malloc.h>
typedef malloc_zone_t = _malloc_zone_t;
typedef dev_t = __darwin_dev_t;
typedef __darwin_dev_t = __int32_t;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef errno_t = ffi.Int;
typedef Darterrno_t = int;
typedef rsize_t = __darwin_size_t;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;

/// Copied from TensorProto::DataType
/// Currently, Ort doesn't support complex64, complex128
enum ONNXTensorElementDataType {
  ONNX_TENSOR_ELEMENT_DATA_TYPE_UNDEFINED(0),

  /// maps to c type float
  ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT(1),

  /// maps to c type uint8_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT8(2),

  /// maps to c type int8_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_INT8(3),

  /// maps to c type uint16_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT16(4),

  /// maps to c type int16_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_INT16(5),

  /// maps to c type int32_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_INT32(6),

  /// maps to c type int64_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64(7),

  /// maps to c++ type std::string
  ONNX_TENSOR_ELEMENT_DATA_TYPE_STRING(8),
  ONNX_TENSOR_ELEMENT_DATA_TYPE_BOOL(9),
  ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT16(10),

  /// maps to c type double
  ONNX_TENSOR_ELEMENT_DATA_TYPE_DOUBLE(11),

  /// maps to c type uint32_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT32(12),

  /// maps to c type uint64_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT64(13),

  /// complex with float32 real and imaginary components
  ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX64(14),

  /// complex with float64 real and imaginary components
  ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX128(15),

  /// Non-IEEE floating-point format based on IEEE754 single-precision
  ONNX_TENSOR_ELEMENT_DATA_TYPE_BFLOAT16(16),

  /// Non-IEEE floating-point format based on IEEE754 single-precision
  ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E4M3FN(17),

  /// Non-IEEE floating-point format based on IEEE754 single-precision
  ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E4M3FNUZ(18),

  /// Non-IEEE floating-point format based on IEEE754 single-precision
  ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E5M2(19),

  /// Non-IEEE floating-point format based on IEEE754 single-precision
  ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E5M2FNUZ(20),

  /// maps to a pair of packed uint4 values (size == 1 byte)
  ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT4(21),

  /// maps to a pair of packed int4 values (size == 1 byte)
  ONNX_TENSOR_ELEMENT_DATA_TYPE_INT4(22);

  final int value;
  const ONNXTensorElementDataType(this.value);

  static ONNXTensorElementDataType fromValue(int value) => switch (value) {
        0 => ONNX_TENSOR_ELEMENT_DATA_TYPE_UNDEFINED,
        1 => ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT,
        2 => ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT8,
        3 => ONNX_TENSOR_ELEMENT_DATA_TYPE_INT8,
        4 => ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT16,
        5 => ONNX_TENSOR_ELEMENT_DATA_TYPE_INT16,
        6 => ONNX_TENSOR_ELEMENT_DATA_TYPE_INT32,
        7 => ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64,
        8 => ONNX_TENSOR_ELEMENT_DATA_TYPE_STRING,
        9 => ONNX_TENSOR_ELEMENT_DATA_TYPE_BOOL,
        10 => ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT16,
        11 => ONNX_TENSOR_ELEMENT_DATA_TYPE_DOUBLE,
        12 => ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT32,
        13 => ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT64,
        14 => ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX64,
        15 => ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX128,
        16 => ONNX_TENSOR_ELEMENT_DATA_TYPE_BFLOAT16,
        17 => ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E4M3FN,
        18 => ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E4M3FNUZ,
        19 => ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E5M2,
        20 => ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E5M2FNUZ,
        21 => ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT4,
        22 => ONNX_TENSOR_ELEMENT_DATA_TYPE_INT4,
        _ => throw ArgumentError(
            "Unknown value for ONNXTensorElementDataType: $value"),
      };
}

/// Synced with onnx TypeProto oneof
enum ONNXType {
  ONNX_TYPE_UNKNOWN(0),
  ONNX_TYPE_TENSOR(1),
  ONNX_TYPE_SEQUENCE(2),
  ONNX_TYPE_MAP(3),
  ONNX_TYPE_OPAQUE(4),
  ONNX_TYPE_SPARSETENSOR(5),
  ONNX_TYPE_OPTIONAL(6);

  final int value;
  const ONNXType(this.value);

  static ONNXType fromValue(int value) => switch (value) {
        0 => ONNX_TYPE_UNKNOWN,
        1 => ONNX_TYPE_TENSOR,
        2 => ONNX_TYPE_SEQUENCE,
        3 => ONNX_TYPE_MAP,
        4 => ONNX_TYPE_OPAQUE,
        5 => ONNX_TYPE_SPARSETENSOR,
        6 => ONNX_TYPE_OPTIONAL,
        _ => throw ArgumentError("Unknown value for ONNXType: $value"),
      };
}

/// These types are synced with internal
/// SparseFormatFlags
enum OrtSparseFormat {
  ORT_SPARSE_UNDEFINED(0),
  ORT_SPARSE_COO(1),
  ORT_SPARSE_CSRC(2),
  ORT_SPARSE_BLOCK_SPARSE(4);

  final int value;
  const OrtSparseFormat(this.value);

  static OrtSparseFormat fromValue(int value) => switch (value) {
        0 => ORT_SPARSE_UNDEFINED,
        1 => ORT_SPARSE_COO,
        2 => ORT_SPARSE_CSRC,
        4 => ORT_SPARSE_BLOCK_SPARSE,
        _ => throw ArgumentError("Unknown value for OrtSparseFormat: $value"),
      };
}

/// Enum allows to query sparse tensor indices
enum OrtSparseIndicesFormat {
  ORT_SPARSE_COO_INDICES(0),
  ORT_SPARSE_CSR_INNER_INDICES(1),
  ORT_SPARSE_CSR_OUTER_INDICES(2),
  ORT_SPARSE_BLOCK_SPARSE_INDICES(3);

  final int value;
  const OrtSparseIndicesFormat(this.value);

  static OrtSparseIndicesFormat fromValue(int value) => switch (value) {
        0 => ORT_SPARSE_COO_INDICES,
        1 => ORT_SPARSE_CSR_INNER_INDICES,
        2 => ORT_SPARSE_CSR_OUTER_INDICES,
        3 => ORT_SPARSE_BLOCK_SPARSE_INDICES,
        _ => throw ArgumentError(
            "Unknown value for OrtSparseIndicesFormat: $value"),
      };
}

/// \brief Logging severity levels
///
/// In typical API usage, specifying a logging severity level specifies the minimum severity of log messages to show.
enum OrtLoggingLevel {
  /// < Verbose informational messages (least severe).
  ORT_LOGGING_LEVEL_VERBOSE(0),

  /// < Informational messages.
  ORT_LOGGING_LEVEL_INFO(1),

  /// < Warning messages.
  ORT_LOGGING_LEVEL_WARNING(2),

  /// < Error messages.
  ORT_LOGGING_LEVEL_ERROR(3),

  /// < Fatal error messages (most severe).
  ORT_LOGGING_LEVEL_FATAL(4);

  final int value;
  const OrtLoggingLevel(this.value);

  static OrtLoggingLevel fromValue(int value) => switch (value) {
        0 => ORT_LOGGING_LEVEL_VERBOSE,
        1 => ORT_LOGGING_LEVEL_INFO,
        2 => ORT_LOGGING_LEVEL_WARNING,
        3 => ORT_LOGGING_LEVEL_ERROR,
        4 => ORT_LOGGING_LEVEL_FATAL,
        _ => throw ArgumentError("Unknown value for OrtLoggingLevel: $value"),
      };
}

enum OrtErrorCode {
  ORT_OK(0),
  ORT_FAIL(1),
  ORT_INVALID_ARGUMENT(2),
  ORT_NO_SUCHFILE(3),
  ORT_NO_MODEL(4),
  ORT_ENGINE_ERROR(5),
  ORT_RUNTIME_EXCEPTION(6),
  ORT_INVALID_PROTOBUF(7),
  ORT_MODEL_LOADED(8),
  ORT_NOT_IMPLEMENTED(9),
  ORT_INVALID_GRAPH(10),
  ORT_EP_FAIL(11);

  final int value;
  const OrtErrorCode(this.value);

  static OrtErrorCode fromValue(int value) => switch (value) {
        0 => ORT_OK,
        1 => ORT_FAIL,
        2 => ORT_INVALID_ARGUMENT,
        3 => ORT_NO_SUCHFILE,
        4 => ORT_NO_MODEL,
        5 => ORT_ENGINE_ERROR,
        6 => ORT_RUNTIME_EXCEPTION,
        7 => ORT_INVALID_PROTOBUF,
        8 => ORT_MODEL_LOADED,
        9 => ORT_NOT_IMPLEMENTED,
        10 => ORT_INVALID_GRAPH,
        11 => ORT_EP_FAIL,
        _ => throw ArgumentError("Unknown value for OrtErrorCode: $value"),
      };
}

enum OrtOpAttrType {
  ORT_OP_ATTR_UNDEFINED(0),
  ORT_OP_ATTR_INT(1),
  ORT_OP_ATTR_INTS(2),
  ORT_OP_ATTR_FLOAT(3),
  ORT_OP_ATTR_FLOATS(4),
  ORT_OP_ATTR_STRING(5),
  ORT_OP_ATTR_STRINGS(6);

  final int value;
  const OrtOpAttrType(this.value);

  static OrtOpAttrType fromValue(int value) => switch (value) {
        0 => ORT_OP_ATTR_UNDEFINED,
        1 => ORT_OP_ATTR_INT,
        2 => ORT_OP_ATTR_INTS,
        3 => ORT_OP_ATTR_FLOAT,
        4 => ORT_OP_ATTR_FLOATS,
        5 => ORT_OP_ATTR_STRING,
        6 => ORT_OP_ATTR_STRINGS,
        _ => throw ArgumentError("Unknown value for OrtOpAttrType: $value"),
      };
}

final class OrtEnv extends ffi.Opaque {}

final class OrtStatus extends ffi.Opaque {}

final class OrtMemoryInfo extends ffi.Opaque {}

final class OrtIoBinding extends ffi.Opaque {}

final class OrtSession extends ffi.Opaque {}

final class OrtValue extends ffi.Opaque {}

final class OrtRunOptions extends ffi.Opaque {}

final class OrtTypeInfo extends ffi.Opaque {}

final class OrtTensorTypeAndShapeInfo extends ffi.Opaque {}

final class OrtMapTypeInfo extends ffi.Opaque {}

final class OrtSequenceTypeInfo extends ffi.Opaque {}

final class OrtOptionalTypeInfo extends ffi.Opaque {}

final class OrtSessionOptions extends ffi.Opaque {}

final class OrtCustomOpDomain extends ffi.Opaque {}

final class OrtModelMetadata extends ffi.Opaque {}

final class OrtThreadPoolParams extends ffi.Opaque {}

final class OrtThreadingOptions extends ffi.Opaque {}

final class OrtArenaCfg extends ffi.Opaque {}

final class OrtPrepackedWeightsContainer extends ffi.Opaque {}

final class OrtTensorRTProviderOptionsV2 extends ffi.Opaque {}

final class OrtCUDAProviderOptionsV2 extends ffi.Opaque {}

final class OrtCANNProviderOptions extends ffi.Opaque {}

final class OrtDnnlProviderOptions extends ffi.Opaque {}

final class OrtOp extends ffi.Opaque {}

final class OrtOpAttr extends ffi.Opaque {}

final class OrtLogger extends ffi.Opaque {}

final class OrtShapeInferContext extends ffi.Opaque {}

final class OrtLoraAdapter extends ffi.Opaque {}

/// \brief Memory allocation interface
///
/// Structure of function pointers that defines a memory allocator. This can be created and filled in by the user for custom allocators.
///
/// When an allocator is passed to any function, be sure that the allocator object is not destroyed until the last allocated object using it is freed.
final class OrtAllocator extends ffi.Struct {
  /// < Must be initialized to ORT_API_VERSION
  @ffi.Uint32()
  external int version;

  /// < Returns a pointer to an allocated block of `size` bytes
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OrtAllocator> this_, ffi.Size size)>> Alloc;

  /// < Free a block of memory previously allocated with OrtAllocator::Alloc
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OrtAllocator> this_, ffi.Pointer<ffi.Void> p)>> Free;

  /// < Return a pointer to an ::OrtMemoryInfo that describes this allocator
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<OrtMemoryInfo> Function(
              ffi.Pointer<OrtAllocator> this_)>> Info;

  /// < Returns a pointer to an allocated block of `size` bytes
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OrtAllocator> this_, ffi.Size size)>> Reserve;
}

/// \brief Graph optimization level
///
/// Refer to https://www.onnxruntime.ai/docs/performance/graph-optimizations.html#graph-optimization-levels
/// for an in-depth understanding of the Graph Optimization Levels.
enum GraphOptimizationLevel {
  ORT_DISABLE_ALL(0),
  ORT_ENABLE_BASIC(1),
  ORT_ENABLE_EXTENDED(2),
  ORT_ENABLE_ALL(99);

  final int value;
  const GraphOptimizationLevel(this.value);

  static GraphOptimizationLevel fromValue(int value) => switch (value) {
        0 => ORT_DISABLE_ALL,
        1 => ORT_ENABLE_BASIC,
        2 => ORT_ENABLE_EXTENDED,
        99 => ORT_ENABLE_ALL,
        _ => throw ArgumentError(
            "Unknown value for GraphOptimizationLevel: $value"),
      };
}

enum ExecutionMode {
  ORT_SEQUENTIAL(0),
  ORT_PARALLEL(1);

  final int value;
  const ExecutionMode(this.value);

  static ExecutionMode fromValue(int value) => switch (value) {
        0 => ORT_SEQUENTIAL,
        1 => ORT_PARALLEL,
        _ => throw ArgumentError("Unknown value for ExecutionMode: $value"),
      };
}

/// \brief Language projection identifiers
/// /see OrtApi::SetLanguageProjection
enum OrtLanguageProjection {
  ORT_PROJECTION_C(0),
  ORT_PROJECTION_CPLUSPLUS(1),
  ORT_PROJECTION_CSHARP(2),
  ORT_PROJECTION_PYTHON(3),
  ORT_PROJECTION_JAVA(4),
  ORT_PROJECTION_WINML(5),
  ORT_PROJECTION_NODEJS(6);

  final int value;
  const OrtLanguageProjection(this.value);

  static OrtLanguageProjection fromValue(int value) => switch (value) {
        0 => ORT_PROJECTION_C,
        1 => ORT_PROJECTION_CPLUSPLUS,
        2 => ORT_PROJECTION_CSHARP,
        3 => ORT_PROJECTION_PYTHON,
        4 => ORT_PROJECTION_JAVA,
        5 => ORT_PROJECTION_WINML,
        6 => ORT_PROJECTION_NODEJS,
        _ => throw ArgumentError(
            "Unknown value for OrtLanguageProjection: $value"),
      };
}

final class OrtKernelInfo extends ffi.Opaque {}

final class OrtKernelContext extends ffi.Opaque {}

/// The OrtCustomOp structure defines a custom op's schema and its kernel callbacks. The callbacks are filled in by
/// the implementor of the custom op.
final class OrtCustomOp extends ffi.Struct {
  /// Must be initialized to ORT_API_VERSION
  @ffi.Uint32()
  external int version;

  /// This callback creates the kernel, which is a user defined
  /// parameter that is passed to the Kernel* callbacks below. It is
  /// recommended to use CreateKernelV2 which allows for a safe error
  /// propagation by returning an OrtStatusPtr.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OrtCustomOp> op,
              ffi.Pointer<OrtApi> api,
              ffi.Pointer<OrtKernelInfo> info)>> CreateKernel;

  /// Returns the name of the op
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<OrtCustomOp> op)>> GetName;

  /// Returns the type of the execution provider, return nullptr to use CPU execution provider
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<OrtCustomOp> op)>>
      GetExecutionProviderType;

  /// Returns the count and types of the input & output tensors
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<OrtCustomOp> op, ffi.Size index)>> GetInputType;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<OrtCustomOp> op)>>
      GetInputTypeCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<OrtCustomOp> op, ffi.Size index)>> GetOutputType;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<OrtCustomOp> op)>>
      GetOutputTypeCount;

  /// Perform a computation step.  It is recommended to use
  /// KernelComputeV2 which allows for a safe error propagation by
  /// returning an OrtStatusPtr.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void> op_kernel,
              ffi.Pointer<OrtKernelContext> context)>> KernelCompute;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> op_kernel)>>
      KernelDestroy;

  /// Returns the characteristics of the input & output tensors
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<OrtCustomOp> op, ffi.Size index)>>
      GetInputCharacteristic;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<OrtCustomOp> op, ffi.Size index)>>
      GetOutputCharacteristic;

  /// Returns the memory type of the input tensors. This API allows the custom op
  /// to place the inputs on specific devices. By default, it returns
  /// OrtMemTypeDefault, which means the input is placed on the default device for
  /// the execution provider. If the inputs need to be with different memory tyeps,
  /// this function can be overridden to return the specific memory types.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<OrtCustomOp> op, ffi.Size index)>>
      GetInputMemoryType;

  /// Returns the minimum number of input arguments expected for the variadic input.
  /// Applicable only for custom ops that have a variadic input.
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>>
      GetVariadicInputMinArity;

  /// Returns true (non-zero) if all arguments of a variadic input have to be of the same type (homogeneous),
  /// and false (zero) otherwise.
  /// Applicable only for custom ops that have a variadic input.
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>>
      GetVariadicInputHomogeneity;

  /// Returns the minimum number of output values expected for the variadic output.
  /// Applicable only for custom ops that have a variadic output.
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>>
      GetVariadicOutputMinArity;

  /// Returns true (non-zero) if all outputs values of a variadic output have to be of the same type (homogeneous),
  /// and false (zero) otherwise.
  /// Applicable only for custom ops that have a variadic output.
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>>
      GetVariadicOutputHomogeneity;

  /// Create the kernel state which is passed to each compute call.
  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtCustomOp> op,
              ffi.Pointer<OrtApi> api,
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Pointer<ffi.Void>> kernel)>> CreateKernelV2;

  /// Perform the computation step.
  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<ffi.Void> op_kernel,
              ffi.Pointer<OrtKernelContext> context)>> KernelComputeV2;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtCustomOp>, ffi.Pointer<OrtShapeInferContext>)>>
      InferOutputShapeFn;

  /// Get start range
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>>
      GetStartVersion;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>>
      GetEndVersion;

  /// Get the inplace_map that defines which output can reuse which input
  /// Callers will provide 2 raw int* and pass in their address, this function will fill these 2 arrays
  /// when return, output (*output_index)[i] may reuse the input (*input_index[i]).
  /// The return value is the size of these 2 arrays.
  /// Callers are responsible to delete these 2 arrays after use by calling OrtCustomOp::ReleaseMayInplace().
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Pointer<ffi.Int>> input_index,
              ffi.Pointer<ffi.Pointer<ffi.Int>> output_index)>> GetMayInplace;

  /// Release the pointer input_index and output_index allocated from GetMayInplace() function.
  /// If GetMayInplace() is defined, this function MUST be defined as well.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int> input_index,
              ffi.Pointer<ffi.Int> output_index)>> ReleaseMayInplace;

  /// Same as GetMayInplace() and ReleaseMayInplace()
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Pointer<ffi.Int>> input_index,
              ffi.Pointer<ffi.Pointer<ffi.Int>> output_index)>> GetAliasMap;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int> input_index,
              ffi.Pointer<ffi.Int> output_index)>> ReleaseAliasMap;
}

/// \brief The C API
///
/// All C API functions are defined inside this structure as pointers to functions.
/// Call OrtApiBase::GetApi to get a pointer to it
///
/// \nosubgrouping
final class OrtApi extends ffi.Struct {
  /// \brief Create an OrtStatus from a null terminated string
  ///
  /// \param[in] code
  /// \param[in] msg A null-terminated string. Its contents will be copied.
  /// \return A new OrtStatus object, must be destroyed with OrtApi::ReleaseStatus
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<OrtStatus> Function(
              ffi.UnsignedInt code, ffi.Pointer<ffi.Char> msg)>> CreateStatus;

  /// \brief Get OrtErrorCode from OrtStatus
  ///
  /// \param[in] status
  /// \return OrtErrorCode that \p status was created with
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<OrtStatus> status)>>
      GetErrorCode;

  /// \brief Get error string from OrtStatus
  ///
  /// \param[in] status
  /// \return The error message inside the `status`. Do not free the returned value.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<OrtStatus> status)>>
      GetErrorMessage;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.UnsignedInt log_severity_level,
              ffi.Pointer<ffi.Char> logid,
              ffi.Pointer<ffi.Pointer<OrtEnv>> out)>> CreateEnv;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              OrtLoggingFunction logging_function,
              ffi.Pointer<ffi.Void> logger_param,
              ffi.UnsignedInt log_severity_level,
              ffi.Pointer<ffi.Char> logid,
              ffi.Pointer<ffi.Pointer<OrtEnv>> out)>> CreateEnvWithCustomLogger;

  external ffi.Pointer<
          ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env)>>
      EnableTelemetryEvents;

  external ffi.Pointer<
          ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env)>>
      DisableTelemetryEvents;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtEnv> env,
              ffi.Pointer<ffi.Char> model_path,
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Pointer<OrtSession>> out)>> CreateSession;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtEnv> env,
                  ffi.Pointer<ffi.Void> model_data,
                  ffi.Size model_data_length,
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Pointer<OrtSession>> out)>>
      CreateSessionFromArray;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Pointer<OrtRunOptions> run_options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> input_names,
              ffi.Pointer<ffi.Pointer<OrtValue>> inputs,
              ffi.Size input_len,
              ffi.Pointer<ffi.Pointer<ffi.Char>> output_names,
              ffi.Size output_names_len,
              ffi.Pointer<ffi.Pointer<OrtValue>> outputs)>> Run;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtSessionOptions>> options)>>
      CreateSessionOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Char> optimized_model_filepath)>>
      SetOptimizedModelFilePath;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> in_options,
                  ffi.Pointer<ffi.Pointer<OrtSessionOptions>> out_options)>>
      CloneSessionOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
              ffi.UnsignedInt execution_mode)>> SetSessionExecutionMode;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> profile_file_prefix)>> EnableProfiling;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>>
      DisableProfiling;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>>
      EnableMemPattern;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>>
      DisableMemPattern;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>>
      EnableCpuMemArena;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>>
      DisableCpuMemArena;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> logid)>> SetSessionLogId;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Int session_log_verbosity_level)>>
      SetSessionLogVerbosityLevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
              ffi.Int session_log_severity_level)>> SetSessionLogSeverityLevel;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.UnsignedInt graph_optimization_level)>>
      SetSessionGraphOptimizationLevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
              ffi.Int intra_op_num_threads)>> SetIntraOpNumThreads;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
              ffi.Int inter_op_num_threads)>> SetInterOpNumThreads;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<ffi.Char> domain,
                  ffi.Pointer<ffi.Pointer<OrtCustomOpDomain>> out)>>
      CreateCustomOpDomain;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtCustomOpDomain> custom_op_domain,
              ffi.Pointer<OrtCustomOp> op)>> CustomOpDomain_Add;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtCustomOpDomain> custom_op_domain)>>
      AddCustomOpDomain;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Char> library_path,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> library_handle)>>
      RegisterCustomOpsLibrary;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSession> session, ffi.Pointer<ffi.Size> out)>>
      SessionGetInputCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSession> session, ffi.Pointer<ffi.Size> out)>>
      SessionGetOutputCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSession> session, ffi.Pointer<ffi.Size> out)>>
      SessionGetOverridableInitializerCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSession> session,
                  ffi.Size index,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      SessionGetInputTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSession> session,
                  ffi.Size index,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      SessionGetOutputTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSession> session,
                  ffi.Size index,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      SessionGetOverridableInitializerTypeInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Size index,
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Pointer<ffi.Char>> value)>> SessionGetInputName;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Size index,
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Pointer<ffi.Char>> value)>> SessionGetOutputName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSession> session,
                  ffi.Size index,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> value)>>
      SessionGetOverridableInitializerName;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Pointer<OrtRunOptions>> out)>> CreateRunOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options,
              ffi.Int log_verbosity_level)>> RunOptionsSetRunLogVerbosityLevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options,
              ffi.Int log_severity_level)>> RunOptionsSetRunLogSeverityLevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options,
              ffi.Pointer<ffi.Char> run_tag)>> RunOptionsSetRunTag;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options,
                  ffi.Pointer<ffi.Int> log_verbosity_level)>>
      RunOptionsGetRunLogVerbosityLevel;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options,
                  ffi.Pointer<ffi.Int> log_severity_level)>>
      RunOptionsGetRunLogSeverityLevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> run_tag)>> RunOptionsGetRunTag;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options)>>
      RunOptionsSetTerminate;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options)>>
      RunOptionsUnsetTerminate;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Int64> shape,
              ffi.Size shape_len,
              ffi.UnsignedInt type,
              ffi.Pointer<ffi.Pointer<OrtValue>> out)>> CreateTensorAsOrtValue;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtMemoryInfo> info,
                  ffi.Pointer<ffi.Void> p_data,
                  ffi.Size p_data_len,
                  ffi.Pointer<ffi.Int64> shape,
                  ffi.Size shape_len,
                  ffi.UnsignedInt type,
                  ffi.Pointer<ffi.Pointer<OrtValue>> out)>>
      CreateTensorWithDataAsOrtValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Int> out)>> IsTensor;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValue> value,
              ffi.Pointer<ffi.Pointer<ffi.Void>> out)>> GetTensorMutableData;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> value,
              ffi.Pointer<ffi.Pointer<ffi.Char>> s,
              ffi.Size s_len)>> FillStringTensor;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Size> len)>>
      GetStringTensorDataLength;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> value,
              ffi.Pointer<ffi.Void> s,
              ffi.Size s_len,
              ffi.Pointer<ffi.Size> offsets,
              ffi.Size offsets_len)>> GetStringTensorContent;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info,
                  ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>>
      CastTypeInfoToTensorInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info,
              ffi.Pointer<ffi.UnsignedInt> out)>> GetOnnxTypeFromTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>>
      CreateTensorTypeAndShapeInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.UnsignedInt type)>> SetTensorElementType;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.Pointer<ffi.Int64> dim_values,
              ffi.Size dim_count)>> SetDimensions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.Pointer<ffi.UnsignedInt> out)>> GetTensorElementType;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.Pointer<ffi.Size> out)>> GetDimensionsCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.Pointer<ffi.Int64> dim_values,
              ffi.Size dim_values_length)>> GetDimensions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.Pointer<ffi.Pointer<ffi.Char>> dim_params,
              ffi.Size dim_params_length)>> GetSymbolicDimensions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.Pointer<ffi.Size> out)>> GetTensorShapeElementCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtValue> value,
                  ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>>
      GetTensorTypeAndShape;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValue> value,
              ffi.Pointer<ffi.Pointer<OrtTypeInfo>> out)>> GetTypeInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValue> value,
              ffi.Pointer<ffi.UnsignedInt> out)>> GetValueType;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Char> name,
              ffi.Int type,
              ffi.Int id,
              ffi.Int mem_type,
              ffi.Pointer<ffi.Pointer<OrtMemoryInfo>> out)>> CreateMemoryInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Int type, ffi.Int mem_type,
                  ffi.Pointer<ffi.Pointer<OrtMemoryInfo>> out)>>
      CreateCpuMemoryInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtMemoryInfo> info1,
              ffi.Pointer<OrtMemoryInfo> info2,
              ffi.Pointer<ffi.Int> out)>> CompareMemoryInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtMemoryInfo> ptr,
              ffi.Pointer<ffi.Pointer<ffi.Char>> out)>> MemoryInfoGetName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtMemoryInfo> ptr, ffi.Pointer<ffi.Int> out)>>
      MemoryInfoGetId;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtMemoryInfo> ptr, ffi.Pointer<ffi.Int> out)>>
      MemoryInfoGetMemType;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtMemoryInfo> ptr, ffi.Pointer<ffi.Int> out)>>
      MemoryInfoGetType;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtAllocator> ort_allocator,
              ffi.Size size,
              ffi.Pointer<ffi.Pointer<ffi.Void>> out)>> AllocatorAlloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtAllocator> ort_allocator,
              ffi.Pointer<ffi.Void> p)>> AllocatorFree;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtAllocator> ort_allocator,
              ffi.Pointer<ffi.Pointer<OrtMemoryInfo>> out)>> AllocatorGetInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtAllocator>> out)>>
      GetAllocatorWithDefaultOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> dim_denotation,
              ffi.Int64 dim_value)>> AddFreeDimensionOverride;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> value,
              ffi.Int index,
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Pointer<OrtValue>> out)>> GetValue;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Size> out)>>
      GetValueCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Pointer<OrtValue>> in1,
              ffi.Size num_values,
              ffi.UnsignedInt value_type,
              ffi.Pointer<ffi.Pointer<OrtValue>> out)>> CreateValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Char> domain_name,
              ffi.Pointer<ffi.Char> type_name,
              ffi.Pointer<ffi.Void> data_container,
              ffi.Size data_container_size,
              ffi.Pointer<ffi.Pointer<OrtValue>> out)>> CreateOpaqueValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Char> domain_name,
              ffi.Pointer<ffi.Char> type_name,
              ffi.Pointer<OrtValue> in1,
              ffi.Pointer<ffi.Void> data_container,
              ffi.Size data_container_size)>> GetOpaqueValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Float> out)>> KernelInfoGetAttribute_float;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Int64> out)>> KernelInfoGetAttribute_int64;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Char> out,
              ffi.Pointer<ffi.Size> size)>> KernelInfoGetAttribute_string;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context,
              ffi.Pointer<ffi.Size> out)>> KernelContext_GetInputCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context,
              ffi.Pointer<ffi.Size> out)>> KernelContext_GetOutputCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelContext> context,
              ffi.Size index,
              ffi.Pointer<ffi.Pointer<OrtValue>> out)>> KernelContext_GetInput;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelContext> context,
              ffi.Size index,
              ffi.Pointer<ffi.Int64> dim_values,
              ffi.Size dim_count,
              ffi.Pointer<ffi.Pointer<OrtValue>> out)>> KernelContext_GetOutput;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtEnv> input)>>
      ReleaseEnv;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtStatus> input)>>
      ReleaseStatus;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtMemoryInfo> input)>>
      ReleaseMemoryInfo;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtSession> input)>>
      ReleaseSession;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtValue> input)>>
      ReleaseValue;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtRunOptions> input)>>
      ReleaseRunOptions;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtTypeInfo> input)>>
      ReleaseTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> input)>>
      ReleaseTensorTypeAndShapeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtSessionOptions> input)>>
      ReleaseSessionOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtCustomOpDomain> input)>>
      ReleaseCustomOpDomain;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtTypeInfo> type_info,
              ffi.Pointer<ffi.Pointer<ffi.Char>> denotation,
              ffi.Pointer<ffi.Size> len)>> GetDenotationFromTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info,
                  ffi.Pointer<ffi.Pointer<OrtMapTypeInfo>> out)>>
      CastTypeInfoToMapTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info,
                  ffi.Pointer<ffi.Pointer<OrtSequenceTypeInfo>> out)>>
      CastTypeInfoToSequenceTypeInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtMapTypeInfo> map_type_info,
              ffi.Pointer<ffi.UnsignedInt> out)>> GetMapKeyType;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtMapTypeInfo> map_type_info,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      GetMapValueType;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSequenceTypeInfo> sequence_type_info,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      GetSequenceElementType;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtMapTypeInfo> input)>>
      ReleaseMapTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtSequenceTypeInfo> input)>>
      ReleaseSequenceTypeInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Pointer<ffi.Char>> out)>> SessionEndProfiling;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSession> session,
                  ffi.Pointer<ffi.Pointer<OrtModelMetadata>> out)>>
      SessionGetModelMetadata;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelMetadata> model_metadata,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> value)>>
      ModelMetadataGetProducerName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelMetadata> model_metadata,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> value)>>
      ModelMetadataGetGraphName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelMetadata> model_metadata,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> value)>>
      ModelMetadataGetDomain;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelMetadata> model_metadata,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> value)>>
      ModelMetadataGetDescription;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelMetadata> model_metadata,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Char> key,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> value)>>
      ModelMetadataLookupCustomMetadataMap;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtModelMetadata> model_metadata,
              ffi.Pointer<ffi.Int64> value)>> ModelMetadataGetVersion;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtModelMetadata> input)>>
      ReleaseModelMetadata;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.UnsignedInt log_severity_level,
                  ffi.Pointer<ffi.Char> logid,
                  ffi.Pointer<OrtThreadingOptions> tp_options,
                  ffi.Pointer<ffi.Pointer<OrtEnv>> out)>>
      CreateEnvWithGlobalThreadPools;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>>
      DisablePerSessionThreads;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtThreadingOptions>> out)>>
      CreateThreadingOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtThreadingOptions> input)>>
      ReleaseThreadingOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelMetadata> model_metadata,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> keys,
                  ffi.Pointer<ffi.Int64> num_keys)>>
      ModelMetadataGetCustomMetadataMapKeys;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> dim_name,
              ffi.Int64 dim_value)>> AddFreeDimensionOverrideByName;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> out_ptr,
              ffi.Pointer<ffi.Int> provider_length)>> GetAvailableProviders;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<ffi.Char>> ptr,
              ffi.Int providers_length)>> ReleaseAvailableProviders;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Size index,
              ffi.Pointer<ffi.Size> out)>> GetStringTensorElementLength;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Size s_len,
              ffi.Size index, ffi.Pointer<ffi.Void> s)>> GetStringTensorElement;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> value,
              ffi.Pointer<ffi.Char> s,
              ffi.Size index)>> FillStringTensorElement;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> config_key,
              ffi.Pointer<ffi.Char> config_value)>> AddSessionConfigEntry;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Pointer<OrtMemoryInfo> mem_info,
              ffi.Pointer<ffi.Pointer<OrtAllocator>> out)>> CreateAllocator;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtAllocator> input)>>
      ReleaseAllocator;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Pointer<OrtRunOptions> run_options,
              ffi.Pointer<OrtIoBinding> binding_ptr)>> RunWithBinding;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSession> session,
              ffi.Pointer<ffi.Pointer<OrtIoBinding>> out)>> CreateIoBinding;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtIoBinding> input)>>
      ReleaseIoBinding;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtIoBinding> binding_ptr,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<OrtValue> val_ptr)>> BindInput;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtIoBinding> binding_ptr,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<OrtValue> val_ptr)>> BindOutput;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtIoBinding> binding_ptr,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<OrtMemoryInfo> mem_info_ptr)>> BindOutputToDevice;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtIoBinding> binding_ptr,
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Pointer<ffi.Char>> buffer,
              ffi.Pointer<ffi.Pointer<ffi.Size>> lengths,
              ffi.Pointer<ffi.Size> count)>> GetBoundOutputNames;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtIoBinding> binding_ptr,
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<OrtValue>>> output,
              ffi.Pointer<ffi.Size> output_count)>> GetBoundOutputValues;

  /// \brief Clears any previously set Inputs for an ::OrtIoBinding
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtIoBinding> binding_ptr)>>
      ClearBoundInputs;

  /// \brief Clears any previously set Outputs for an ::OrtIoBinding
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtIoBinding> binding_ptr)>>
      ClearBoundOutputs;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> value,
              ffi.Pointer<ffi.Int64> location_values,
              ffi.Size location_values_count,
              ffi.Pointer<ffi.Pointer<ffi.Void>> out)>> TensorAt;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtEnv> env,
              ffi.Pointer<OrtMemoryInfo> mem_info,
              ffi.Pointer<OrtArenaCfg> arena_cfg)>> CreateAndRegisterAllocator;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtEnv> ort_env, ffi.UnsignedInt projection)>>
      SetLanguageProjection;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSession> session,
              ffi.Pointer<ffi.Uint64> out)>> SessionGetProfilingStartTimeNs;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options,
              ffi.Int intra_op_num_threads)>> SetGlobalIntraOpNumThreads;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options,
              ffi.Int inter_op_num_threads)>> SetGlobalInterOpNumThreads;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options,
              ffi.Int allow_spinning)>> SetGlobalSpinControl;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<OrtValue> val)>> AddInitializer;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  OrtLoggingFunction logging_function,
                  ffi.Pointer<ffi.Void> logger_param,
                  ffi.UnsignedInt log_severity_level,
                  ffi.Pointer<ffi.Char> logid,
                  ffi.Pointer<OrtThreadingOptions> tp_options,
                  ffi.Pointer<ffi.Pointer<OrtEnv>> out)>>
      CreateEnvWithCustomLoggerAndGlobalThreadPools;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtCUDAProviderOptions> cuda_options)>>
      SessionOptionsAppendExecutionProvider_CUDA;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtROCMProviderOptions> rocm_options)>>
      SessionOptionsAppendExecutionProvider_ROCM;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtOpenVINOProviderOptions> provider_options)>>
      SessionOptionsAppendExecutionProvider_OpenVINO;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtThreadingOptions> tp_options)>>
      SetGlobalDenormalAsZero;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Size max_mem,
              ffi.Int arena_extend_strategy,
              ffi.Int initial_chunk_size_bytes,
              ffi.Int max_dead_bytes_per_chunk,
              ffi.Pointer<ffi.Pointer<OrtArenaCfg>> out)>> CreateArenaCfg;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtArenaCfg> input)>>
      ReleaseArenaCfg;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelMetadata> model_metadata,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> value)>>
      ModelMetadataGetGraphDescription;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtTensorRTProviderOptions> tensorrt_options)>>
      SessionOptionsAppendExecutionProvider_TensorRT;

  external ffi
      .Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Int device_id)>>
      SetCurrentGpuDeviceId;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<ffi.Int> device_id)>>
      GetCurrentGpuDeviceId;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Float> out,
              ffi.Pointer<ffi.Size> size)>> KernelInfoGetAttributeArray_float;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Int64> out,
              ffi.Pointer<ffi.Size> size)>> KernelInfoGetAttributeArray_int64;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>> arena_config_keys,
              ffi.Pointer<ffi.Size> arena_config_values,
              ffi.Size num_keys,
              ffi.Pointer<ffi.Pointer<OrtArenaCfg>> out)>> CreateArenaCfgV2;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtRunOptions> options,
              ffi.Pointer<ffi.Char> config_key,
              ffi.Pointer<ffi.Char> config_value)>> AddRunConfigEntry;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtPrepackedWeightsContainer>> out)>>
      CreatePrepackedWeightsContainer;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<OrtPrepackedWeightsContainer> input)>>
      ReleasePrepackedWeightsContainer;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtEnv> env,
                  ffi.Pointer<ffi.Char> model_path,
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtPrepackedWeightsContainer>
                      prepacked_weights_container,
                  ffi.Pointer<ffi.Pointer<OrtSession>> out)>>
      CreateSessionWithPrepackedWeightsContainer;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtEnv> env,
                  ffi.Pointer<ffi.Void> model_data,
                  ffi.Size model_data_length,
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtPrepackedWeightsContainer>
                      prepacked_weights_container,
                  ffi.Pointer<ffi.Pointer<OrtSession>> out)>>
      CreateSessionFromArrayWithPrepackedWeightsContainer;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options)>>
      SessionOptionsAppendExecutionProvider_TensorRT_V2;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtTensorRTProviderOptionsV2>> out)>>
      CreateTensorRTProviderOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
              ffi.Size num_keys)>> UpdateTensorRTProviderOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>>
      GetTensorRTProviderOptionsAsString;

  /// \brief Release an ::OrtTensorRTProviderOptionsV2
  ///
  /// \note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<OrtTensorRTProviderOptionsV2> input)>>
      ReleaseTensorRTProviderOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>>
      EnableOrtCustomOps;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtEnv> env,
              ffi.Pointer<OrtAllocator> allocator)>> RegisterAllocator;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtEnv> env,
              ffi.Pointer<OrtMemoryInfo> mem_info)>> UnregisterAllocator;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Int> out)>>
      IsSparseTensor;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Int64> dense_shape,
                  ffi.Size dense_shape_len,
                  ffi.UnsignedInt type,
                  ffi.Pointer<ffi.Pointer<OrtValue>> out)>>
      CreateSparseTensorAsOrtValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> ort_value,
              ffi.Pointer<OrtMemoryInfo> data_mem_info,
              ffi.Pointer<ffi.Int64> values_shape,
              ffi.Size values_shape_len,
              ffi.Pointer<ffi.Void> values,
              ffi.Pointer<ffi.Int64> indices_data,
              ffi.Size indices_num)>> FillSparseTensorCoo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> ort_value,
              ffi.Pointer<OrtMemoryInfo> data_mem_info,
              ffi.Pointer<ffi.Int64> values_shape,
              ffi.Size values_shape_len,
              ffi.Pointer<ffi.Void> values,
              ffi.Pointer<ffi.Int64> inner_indices_data,
              ffi.Size inner_indices_num,
              ffi.Pointer<ffi.Int64> outer_indices_data,
              ffi.Size outer_indices_num)>> FillSparseTensorCsr;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtValue> ort_value,
                  ffi.Pointer<OrtMemoryInfo> data_mem_info,
                  ffi.Pointer<ffi.Int64> values_shape,
                  ffi.Size values_shape_len,
                  ffi.Pointer<ffi.Void> values,
                  ffi.Pointer<ffi.Int64> indices_shape_data,
                  ffi.Size indices_shape_len,
                  ffi.Pointer<ffi.Int32> indices_data)>>
      FillSparseTensorBlockSparse;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtMemoryInfo> info,
                  ffi.Pointer<ffi.Void> p_data,
                  ffi.Pointer<ffi.Int64> dense_shape,
                  ffi.Size dense_shape_len,
                  ffi.Pointer<ffi.Int64> values_shape,
                  ffi.Size values_shape_len,
                  ffi.UnsignedInt type,
                  ffi.Pointer<ffi.Pointer<OrtValue>> out)>>
      CreateSparseTensorWithValuesAsOrtValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> ort_value,
              ffi.Pointer<ffi.Int64> indices_data,
              ffi.Size indices_num)>> UseCooIndices;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> ort_value,
              ffi.Pointer<ffi.Int64> inner_data,
              ffi.Size inner_num,
              ffi.Pointer<ffi.Int64> outer_data,
              ffi.Size outer_num)>> UseCsrIndices;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> ort_value,
              ffi.Pointer<ffi.Int64> indices_shape,
              ffi.Size indices_shape_len,
              ffi.Pointer<ffi.Int32> indices_data)>> UseBlockSparseIndices;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value,
              ffi.Pointer<ffi.UnsignedInt> out)>> GetSparseTensorFormat;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value,
                  ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>>
      GetSparseTensorValuesTypeAndShape;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value,
              ffi.Pointer<ffi.Pointer<ffi.Void>> out)>> GetSparseTensorValues;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtValue> ort_value,
                  ffi.UnsignedInt indices_format,
                  ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>>
      GetSparseTensorIndicesTypeShape;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtValue> ort_value,
                  ffi.UnsignedInt indices_format,
                  ffi.Pointer<ffi.Size> num_indices,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> indices)>>
      GetSparseTensorIndices;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Int> out)>> HasValue;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> out)>>
      KernelContext_GetGPUComputeStream;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtValue> value,
                  ffi.Pointer<ffi.Pointer<OrtMemoryInfo>> mem_info)>>
      GetTensorMemoryInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Char> provider_name,
                  ffi.Uint32 version,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> provider_api)>>
      GetExecutionProviderApi;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  OrtCustomCreateThreadFn ort_custom_create_thread_fn)>>
      SessionOptionsSetCustomCreateThreadFn;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Void> ort_custom_thread_creation_options)>>
      SessionOptionsSetCustomThreadCreationOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  OrtCustomJoinThreadFn ort_custom_join_thread_fn)>>
      SessionOptionsSetCustomJoinThreadFn;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options,
                  OrtCustomCreateThreadFn ort_custom_create_thread_fn)>>
      SetGlobalCustomCreateThreadFn;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options,
                  ffi.Pointer<ffi.Void> ort_custom_thread_creation_options)>>
      SetGlobalCustomThreadCreationOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options,
                  OrtCustomJoinThreadFn ort_custom_join_thread_fn)>>
      SetGlobalCustomJoinThreadFn;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtIoBinding> binding_ptr)>>
      SynchronizeBoundInputs;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtIoBinding> binding_ptr)>>
      SynchronizeBoundOutputs;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options)>>
      SessionOptionsAppendExecutionProvider_CUDA_V2;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtCUDAProviderOptionsV2>> out)>>
      CreateCUDAProviderOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
              ffi.Size num_keys)>> UpdateCUDAProviderOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>>
      GetCUDAProviderOptionsAsString;

  /// \brief Release an ::OrtCUDAProviderOptionsV2
  ///
  /// \note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does
  ///
  /// \since Version 1.11.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtCUDAProviderOptionsV2> input)>>
      ReleaseCUDAProviderOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtMIGraphXProviderOptions> migraphx_options)>>
      SessionOptionsAppendExecutionProvider_MIGraphX;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> initializer_names,
              ffi.Pointer<ffi.Pointer<OrtValue>> initializers,
              ffi.Size num_initializers)>> AddExternalInitializers;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Void> data,
              ffi.Int len,
              ffi.UnsignedInt type,
              ffi.Pointer<ffi.Pointer<OrtOpAttr>> op_attr)>> CreateOpAttr;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtOpAttr> input)>>
      ReleaseOpAttr;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Char> op_name,
              ffi.Pointer<ffi.Char> domain,
              ffi.Int version,
              ffi.Pointer<ffi.Pointer<ffi.Char>> type_constraint_names,
              ffi.Pointer<ffi.UnsignedInt> type_constraint_values,
              ffi.Int type_constraint_count,
              ffi.Pointer<ffi.Pointer<OrtOpAttr>> attr_values,
              ffi.Int attr_count,
              ffi.Int input_count,
              ffi.Int output_count,
              ffi.Pointer<ffi.Pointer<OrtOp>> ort_op)>> CreateOp;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelContext> context,
              ffi.Pointer<OrtOp> ort_op,
              ffi.Pointer<ffi.Pointer<OrtValue>> input_values,
              ffi.Int input_count,
              ffi.Pointer<ffi.Pointer<OrtValue>> output_values,
              ffi.Int output_count)>> InvokeOp;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtOp> input)>>
      ReleaseOp;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> provider_name,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
              ffi.Size num_keys)>> SessionOptionsAppendExecutionProvider;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info,
                  ffi.Pointer<ffi.Pointer<OrtKernelInfo>> info_copy)>>
      CopyKernelInfo;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtKernelInfo> input)>>
      ReleaseKernelInfo;

  /// \name Ort Training
  /// @{
  ///   /** \brief Gets the Training C Api struct
  ///    *
  ///    * Call this function to access the ::OrtTrainingApi structure that holds pointers to functions that enable
  ///    * training with onnxruntime.
  ///    * \note A NULL pointer will be returned and no error message will be printed if the training api
  ///    * is not supported with this build. A NULL pointer will be returned and an error message will be
  ///    * printed if the provided version is unsupported, for example when using a runtime older than the
  ///    * version created with this header file.
  ///    *
  ///    * \param[in] version Must be ::ORT_API_VERSION
  ///    * \return The ::OrtTrainingApi struct for the version requested.
  ///    *
  ///    * \since Version 1.13
  ///    */
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<OrtTrainingApi> Function(ffi.Uint32 version)>>
      GetTrainingApi;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtCANNProviderOptions> cann_options)>>
      SessionOptionsAppendExecutionProvider_CANN;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtCANNProviderOptions>> out)>>
      CreateCANNProviderOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtCANNProviderOptions> cann_options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
              ffi.Size num_keys)>> UpdateCANNProviderOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtCANNProviderOptions> cann_options,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>>
      GetCANNProviderOptionsAsString;

  /// \brief Release an OrtCANNProviderOptions
  ///
  /// \param[in] input The pointer of OrtCANNProviderOptions which will been deleted
  ///
  /// \since Version 1.13.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtCANNProviderOptions> input)>>
      ReleaseCANNProviderOptions;

  /// \brief Get OrtDevice type from MemoryInfo
  ///
  /// \since Version 1.14
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OrtMemoryInfo> ptr,
              ffi.Pointer<ffi.UnsignedInt> out)>> MemoryInfoGetDeviceType;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtEnv> ort_env,
              ffi.UnsignedInt log_severity_level)>> UpdateEnvWithCustomLogLevel;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options,
                  ffi.Pointer<ffi.Char> affinity_string)>>
      SetGlobalIntraOpThreadAffinity;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> library_name)>> RegisterCustomOpsLibrary_V2;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Char> registration_func_name)>>
      RegisterCustomOpsUsingFunction;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Size> out)>>
      KernelInfo_GetInputCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Size> out)>>
      KernelInfo_GetOutputCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Size index,
              ffi.Pointer<ffi.Char> out,
              ffi.Pointer<ffi.Size> size)>> KernelInfo_GetInputName;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Size index,
              ffi.Pointer<ffi.Char> out,
              ffi.Pointer<ffi.Size> size)>> KernelInfo_GetOutputName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelInfo> info,
                  ffi.Size index,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      KernelInfo_GetInputTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelInfo> info,
                  ffi.Size index,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      KernelInfo_GetOutputTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelInfo> info,
                  ffi.Pointer<ffi.Char> name,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<OrtValue>> out)>>
      KernelInfoGetAttribute_tensor;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> config_key,
              ffi.Pointer<ffi.Int> out)>> HasSessionConfigEntry;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> config_key,
              ffi.Pointer<ffi.Char> config_value,
              ffi.Pointer<ffi.Size> size)>> GetSessionConfigEntry;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtDnnlProviderOptions> dnnl_options)>>
      SessionOptionsAppendExecutionProvider_Dnnl;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtDnnlProviderOptions>> out)>>
      CreateDnnlProviderOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtDnnlProviderOptions> dnnl_options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
              ffi.Size num_keys)>> UpdateDnnlProviderOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtDnnlProviderOptions> dnnl_options,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>>
      GetDnnlProviderOptionsAsString;

  /// \brief Release an ::OrtDnnlProviderOptions
  ///
  /// \since Version 1.15.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtDnnlProviderOptions> input)>>
      ReleaseDnnlProviderOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Char> out,
              ffi.Pointer<ffi.Size> size)>> KernelInfo_GetNodeName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info,
                  ffi.Pointer<ffi.Pointer<OrtLogger>> logger)>>
      KernelInfo_GetLogger;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context,
                  ffi.Pointer<ffi.Pointer<OrtLogger>> logger)>>
      KernelContext_GetLogger;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtLogger> logger,
              ffi.UnsignedInt log_severity_level,
              ffi.Pointer<ffi.Char> message,
              ffi.Pointer<ffi.Char> file_path,
              ffi.Int line_number,
              ffi.Pointer<ffi.Char> func_name)>> Logger_LogMessage;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtLogger> logger,
                  ffi.Pointer<ffi.UnsignedInt> out)>>
      Logger_GetLoggingSeverityLevel;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelInfo> info,
                  ffi.Size index,
                  ffi.Pointer<ffi.Int> is_constant,
                  ffi.Pointer<ffi.Pointer<OrtValue>> out)>>
      KernelInfoGetConstantInput_tensor;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info,
                  ffi.Pointer<ffi.Pointer<OrtOptionalTypeInfo>> out)>>
      CastTypeInfoToOptionalTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtOptionalTypeInfo> optional_type_info,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> out)>>
      GetOptionalContainedTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtValue> value,
                  ffi.Size index,
                  ffi.Size length_in_bytes,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> buffer)>>
      GetResizedStringTensorElementBuffer;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelContext> context,
                  ffi.Pointer<OrtMemoryInfo> mem_info,
                  ffi.Pointer<ffi.Pointer<OrtAllocator>> out)>>
      KernelContext_GetAllocator;

  /// \brief Returns a null terminated string of the build info including git info and cxx flags
  ///
  /// \return UTF-8 encoded version string. Do not deallocate the returned buffer.
  ///
  /// \since Version 1.15.
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>
      GetBuildInfoString;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtROCMProviderOptions>> out)>>
      CreateROCMProviderOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtROCMProviderOptions> rocm_options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
              ffi.Size num_keys)>> UpdateROCMProviderOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtROCMProviderOptions> rocm_options,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>>
      GetROCMProviderOptionsAsString;

  /// \brief Release an ::OrtROCMProviderOptions
  ///
  /// \note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does
  ///
  /// \since Version 1.16.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtROCMProviderOptions> input)>>
      ReleaseROCMProviderOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtEnv> env,
              ffi.Pointer<ffi.Char> provider_type,
              ffi.Pointer<OrtMemoryInfo> mem_info,
              ffi.Pointer<OrtArenaCfg> arena_cfg,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
              ffi.Size num_keys)>> CreateAndRegisterAllocatorV2;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Pointer<OrtRunOptions> run_options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> input_names,
              ffi.Pointer<ffi.Pointer<OrtValue>> input,
              ffi.Size input_len,
              ffi.Pointer<ffi.Pointer<ffi.Char>> output_names,
              ffi.Size output_names_len,
              ffi.Pointer<ffi.Pointer<OrtValue>> output,
              RunAsyncCallbackFn run_async_callback,
              ffi.Pointer<ffi.Void> user_data)>> RunAsync;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options,
                  ffi.Pointer<ffi.Char> key,
                  ffi.Pointer<ffi.Void> value)>>
      UpdateTensorRTProviderOptionsWithValue;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options,
                  ffi.Pointer<ffi.Char> key,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> ptr)>>
      GetTensorRTProviderOptionsByName;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options,
              ffi.Pointer<ffi.Char> key,
              ffi.Pointer<ffi.Void> value)>> UpdateCUDAProviderOptionsWithValue;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options,
                  ffi.Pointer<ffi.Char> key,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> ptr)>>
      GetCUDAProviderOptionsByName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelContext> context,
                  ffi.Int resource_version,
                  ffi.Int resource_id,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> resource)>>
      KernelContext_GetResource;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> options,
                  OrtLoggingFunction user_logging_function,
                  ffi.Pointer<ffi.Void> user_logging_param)>>
      SetUserLoggingFunction;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtShapeInferContext> context,
              ffi.Pointer<ffi.Size> out)>> ShapeInferContext_GetInputCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtShapeInferContext> context,
                  ffi.Size index,
                  ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> info)>>
      ShapeInferContext_GetInputTypeShape;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtShapeInferContext> context,
                  ffi.Pointer<ffi.Char> attr_name,
                  ffi.Pointer<ffi.Pointer<OrtOpAttr>> attr)>>
      ShapeInferContext_GetAttribute;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtShapeInferContext> context,
                  ffi.Size index, ffi.Pointer<OrtTensorTypeAndShapeInfo> info)>>
      ShapeInferContext_SetOutputTypeShape;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.Pointer<ffi.Pointer<ffi.Char>> dim_params,
              ffi.Size dim_params_length)>> SetSymbolicDimensions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtOpAttr> op_attr,
              ffi.UnsignedInt type,
              ffi.Pointer<ffi.Void> data,
              ffi.Size len,
              ffi.Pointer<ffi.Size> out)>> ReadOpAttr;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> options, ffi.Bool value)>>
      SetDeterministicCompute;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelContext> context,
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>
                  fn,
              ffi.Size total,
              ffi.Size num_batch,
              ffi.Pointer<ffi.Void> usr_data)>> KernelContext_ParallelFor;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
                  ffi.Size num_keys)>>
      SessionOptionsAppendExecutionProvider_OpenVINO_V2;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
                  ffi.Size num_keys)>>
      SessionOptionsAppendExecutionProvider_VitisAI;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelContext> context,
                  ffi.Pointer<OrtMemoryInfo> mem_info,
                  ffi.Size count_or_bytes,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> out)>>
      KernelContext_GetScratchBuffer;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelInfo> info,
                  ffi.Int mem_type,
                  ffi.Pointer<ffi.Pointer<OrtAllocator>> out)>>
      KernelInfoGetAllocator;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>
                      external_initializer_file_names,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>
                      external_initializer_file_buffer_array,
                  ffi.Pointer<ffi.Size> external_initializer_file_lengths,
                  ffi.Size num_external_initializer_files)>>
      AddExternalInitializersFromFilesInMemory;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Char> adapter_file_path,
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Pointer<OrtLoraAdapter>> out)>> CreateLoraAdapter;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Void> bytes,
                  ffi.Size num_bytes,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<OrtLoraAdapter>> out)>>
      CreateLoraAdapterFromArray;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtLoraAdapter> input)>>
      ReleaseLoraAdapter;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options,
                  ffi.Pointer<OrtLoraAdapter> adapter)>>
      RunOptionsAddActiveLoraAdapter;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> sess,
              ffi.Pointer<ffi.Pointer<ffi.Char>> keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> values,
              ffi.Size kv_len)>> SetEpDynamicOptions;
}

typedef OrtStatusPtr = ffi.Pointer<OrtStatus>;
typedef OrtLoggingFunction
    = ffi.Pointer<ffi.NativeFunction<OrtLoggingFunctionFunction>>;
typedef OrtLoggingFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> param,
    ffi.UnsignedInt severity,
    ffi.Pointer<ffi.Char> category,
    ffi.Pointer<ffi.Char> logid,
    ffi.Pointer<ffi.Char> code_location,
    ffi.Pointer<ffi.Char> message);
typedef DartOrtLoggingFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> param,
    OrtLoggingLevel severity,
    ffi.Pointer<ffi.Char> category,
    ffi.Pointer<ffi.Char> logid,
    ffi.Pointer<ffi.Char> code_location,
    ffi.Pointer<ffi.Char> message);

enum OrtAllocatorType {
  OrtInvalidAllocator(-1),
  OrtDeviceAllocator(0),
  OrtArenaAllocator(1);

  final int value;
  const OrtAllocatorType(this.value);

  static OrtAllocatorType fromValue(int value) => switch (value) {
        -1 => OrtInvalidAllocator,
        0 => OrtDeviceAllocator,
        1 => OrtArenaAllocator,
        _ => throw ArgumentError("Unknown value for OrtAllocatorType: $value"),
      };
}

/// \brief Memory types for allocated memory, execution provider specific types should be extended in each provider.
/// /
/// // Whenever this struct is updated, please also update the MakeKey function in onnxruntime / core / framework / execution_provider.cc
enum OrtMemType {
  /// < Any CPU memory used by non-CPU execution provider
  OrtMemTypeCPUInput(-2),

  /// < CPU accessible memory outputted by non-CPU execution provider, i.e. CUDA_PINNED
  OrtMemTypeCPUOutput(-1),

  /// < The default allocator for execution provider
  OrtMemTypeDefault(0);

  /// < Temporary CPU accessible memory allocated by non-CPU execution provider, i.e. CUDA_PINNED
  static const OrtMemTypeCPU = OrtMemTypeCPUOutput;

  final int value;
  const OrtMemType(this.value);

  static OrtMemType fromValue(int value) => switch (value) {
        -2 => OrtMemTypeCPUInput,
        -1 => OrtMemTypeCPUOutput,
        0 => OrtMemTypeDefault,
        _ => throw ArgumentError("Unknown value for OrtMemType: $value"),
      };

  @override
  String toString() {
    if (this == OrtMemTypeCPUOutput)
      return "OrtMemType.OrtMemTypeCPUOutput, OrtMemType.OrtMemTypeCPU";
    return super.toString();
  }
}

/// \brief CUDA Provider Options
///
/// \see OrtApi::SessionOptionsAppendExecutionProvider_CUDA
final class OrtCUDAProviderOptions extends ffi.Struct {
  /// \brief CUDA device Id
  /// Defaults to 0.
  @ffi.Int()
  external int device_id;

  /// \brief CUDA Convolution algorithm search configuration.
  /// See enum OrtCudnnConvAlgoSearch for more details.
  /// Defaults to OrtCudnnConvAlgoSearchExhaustive.
  @ffi.UnsignedInt()
  external int cudnn_conv_algo_search;

  /// \brief CUDA memory limit (To use all possible memory pass in maximum size_t)
  /// Defaults to SIZE_MAX.
  /// \note If a ::OrtArenaCfg has been applied, it will override this field
  @ffi.Size()
  external int gpu_mem_limit;

  /// \brief Strategy used to grow the memory arena
  /// 0 = kNextPowerOfTwo<br>
  /// 1 = kSameAsRequested<br>
  /// Defaults to 0.
  /// \note If a ::OrtArenaCfg has been applied, it will override this field
  @ffi.Int()
  external int arena_extend_strategy;

  /// \brief Flag indicating if copying needs to take place on the same stream as the compute stream in the CUDA EP
  /// 0 = Use separate streams for copying and compute.
  /// 1 = Use the same stream for copying and compute.
  /// Defaults to 1.
  /// WARNING: Setting this to 0 may result in data races for some models.
  /// Please see issue #4829 for more details.
  @ffi.Int()
  external int do_copy_in_default_stream;

  /// \brief Flag indicating if there is a user provided compute stream
  /// Defaults to 0.
  @ffi.Int()
  external int has_user_compute_stream;

  /// \brief User provided compute stream.
  /// If provided, please set `has_user_compute_stream` to 1.
  external ffi.Pointer<ffi.Void> user_compute_stream;

  /// \brief CUDA memory arena configuration parameters
  external ffi.Pointer<OrtArenaCfg> default_memory_arena_cfg;

  /// \brief Enable TunableOp for using.
  /// Set it to 1/0 to enable/disable TunableOp. Otherwise, it is disabled by default.
  /// This option can be overridden by environment variable ORT_CUDA_TUNABLE_OP_ENABLE.
  @ffi.Int()
  external int tunable_op_enable;

  /// \brief Enable TunableOp for tuning.
  /// Set it to 1/0 to enable/disable TunableOp tuning. Otherwise, it is disabled by default.
  /// This option can be overridden by environment variable ORT_CUDA_TUNABLE_OP_TUNING_ENABLE.
  @ffi.Int()
  external int tunable_op_tuning_enable;

  /// \brief Max tuning duration time limit for each instance of TunableOp.
  /// Defaults to 0 to disable the limit.
  @ffi.Int()
  external int tunable_op_max_tuning_duration_ms;
}

/// \brief Algorithm to use for cuDNN Convolution Op
enum OrtCudnnConvAlgoSearch {
  /// expensive exhaustive benchmarking using cudnnFindConvolutionForwardAlgorithmEx
  OrtCudnnConvAlgoSearchExhaustive(0),

  /// lightweight heuristic based search using cudnnGetConvolutionForwardAlgorithm_v7
  OrtCudnnConvAlgoSearchHeuristic(1),

  /// default algorithm using CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM
  OrtCudnnConvAlgoSearchDefault(2);

  final int value;
  const OrtCudnnConvAlgoSearch(this.value);

  static OrtCudnnConvAlgoSearch fromValue(int value) => switch (value) {
        0 => OrtCudnnConvAlgoSearchExhaustive,
        1 => OrtCudnnConvAlgoSearchHeuristic,
        2 => OrtCudnnConvAlgoSearchDefault,
        _ => throw ArgumentError(
            "Unknown value for OrtCudnnConvAlgoSearch: $value"),
      };
}

/// \brief ROCM Provider Options
///
/// \see OrtApi::SessionOptionsAppendExecutionProvider_ROCM
final class OrtROCMProviderOptions extends ffi.Struct {
  /// \brief ROCM device Id
  /// Defaults to 0.
  @ffi.Int()
  external int device_id;

  /// \brief ROCM MIOpen Convolution algorithm exaustive search option.
  /// Defaults to 0 (false).
  @ffi.Int()
  external int miopen_conv_exhaustive_search;

  /// \brief ROCM memory limit (To use all possible memory pass in maximum size_t)
  /// Defaults to SIZE_MAX.
  /// \note If a ::OrtArenaCfg has been applied, it will override this field
  @ffi.Size()
  external int gpu_mem_limit;

  /// \brief Strategy used to grow the memory arena
  /// 0 = kNextPowerOfTwo<br>
  /// 1 = kSameAsRequested<br>
  /// Defaults to 0.
  /// \note If a ::OrtArenaCfg has been applied, it will override this field
  @ffi.Int()
  external int arena_extend_strategy;

  /// \brief Flag indicating if copying needs to take place on the same stream as the compute stream in the ROCM EP
  /// 0 = Use separate streams for copying and compute.
  /// 1 = Use the same stream for copying and compute.
  /// Defaults to 1.
  /// WARNING: Setting this to 0 may result in data races for some models.
  /// Please see issue #4829 for more details.
  @ffi.Int()
  external int do_copy_in_default_stream;

  /// \brief Flag indicating if there is a user provided compute stream
  /// Defaults to 0.
  @ffi.Int()
  external int has_user_compute_stream;

  /// \brief User provided compute stream.
  /// If provided, please set `has_user_compute_stream` to 1.
  external ffi.Pointer<ffi.Void> user_compute_stream;

  /// \brief ROCM memory arena configuration parameters
  external ffi.Pointer<OrtArenaCfg> default_memory_arena_cfg;

  @ffi.Int()
  external int enable_hip_graph;

  /// \brief Enable TunableOp for using.
  /// Set it to 1/0 to enable/disable TunableOp. Otherwise, it is disabled by default.
  /// This option can be overridden by environment variable ORT_ROCM_TUNABLE_OP_ENABLE.
  @ffi.Int()
  external int tunable_op_enable;

  /// \brief Enable TunableOp for tuning.
  /// Set it to 1/0 to enable/disable TunableOp tuning. Otherwise, it is disabled by default.
  /// This option can be overridden by environment variable ORT_ROCM_TUNABLE_OP_TUNING_ENABLE.
  @ffi.Int()
  external int tunable_op_tuning_enable;

  /// \brief Max tuning duration time limit for each instance of TunableOp.
  /// Defaults to 0 to disable the limit.
  @ffi.Int()
  external int tunable_op_max_tuning_duration_ms;
}

/// \brief OpenVINO Provider Options
/// \brief This Struct is frozen since ORT 1.13.0. Its maintained part of Legacy API for compatibility.
/// \brief For latest OpenVINO Provider Options update to the ProviderOptions map.
/// \brief Latest OpenVINO Provider Options are listed in the
/// \htmlonly
/// <a href="https://onnxruntime.ai/docs/execution-providers/OpenVINO-ExecutionProvider.html#summary-of-options">onnxruntime document.</a>
/// \endhtmlonly
/// \see OrtApi::SessionOptionsAppendExecutionProvider()
final class OrtOpenVINOProviderOptions extends ffi.Struct {
  /// \brief Device type string
  ///
  /// Valid settings are one of: "CPU_FP32", "CPU_FP16", "GPU_FP32", "GPU_FP16"
  external ffi.Pointer<ffi.Char> device_type;

  /// < 0 = disabled, nonzero = enabled
  @ffi.UnsignedChar()
  external int enable_npu_fast_compile;

  external ffi.Pointer<ffi.Char> device_id;

  /// < 0 = Use default number of threads
  @ffi.Size()
  external int num_of_threads;

  /// path is set to empty by default
  external ffi.Pointer<ffi.Char> cache_dir;

  external ffi.Pointer<ffi.Void> context;

  /// < 0 = disabled, nonzero = enabled
  @ffi.UnsignedChar()
  external int enable_opencl_throttling;

  /// < 0 = disabled, nonzero = enabled
  @ffi.UnsignedChar()
  external int enable_dynamic_shapes;
}

/// \brief TensorRT Provider Options
///
/// \see OrtApi::SessionOptionsAppendExecutionProvider_TensorRT
final class OrtTensorRTProviderOptions extends ffi.Struct {
  /// < CUDA device id (0 = default device)
  @ffi.Int()
  external int device_id;

  /// indicator of user specified CUDA compute stream.
  @ffi.Int()
  external int has_user_compute_stream;

  /// user specified CUDA compute stream.
  external ffi.Pointer<ffi.Void> user_compute_stream;

  /// maximum iterations for TensorRT parser to get capability
  @ffi.Int()
  external int trt_max_partition_iterations;

  /// minimum size of TensorRT subgraphs
  @ffi.Int()
  external int trt_min_subgraph_size;

  /// maximum workspace size for TensorRT.
  @ffi.Size()
  external int trt_max_workspace_size;

  /// enable TensorRT FP16 precision. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_fp16_enable;

  /// enable TensorRT INT8 precision. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_int8_enable;

  /// TensorRT INT8 calibration table name.
  external ffi.Pointer<ffi.Char> trt_int8_calibration_table_name;

  /// use native TensorRT generated calibration table. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_int8_use_native_calibration_table;

  /// enable DLA. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_dla_enable;

  /// DLA core number. Default 0
  @ffi.Int()
  external int trt_dla_core;

  /// dump TRT subgraph. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_dump_subgraphs;

  /// enable engine caching. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_engine_cache_enable;

  /// specify engine cache path
  external ffi.Pointer<ffi.Char> trt_engine_cache_path;

  /// enable engine decryption. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_engine_decryption_enable;

  /// specify engine decryption library path
  external ffi.Pointer<ffi.Char> trt_engine_decryption_lib_path;

  /// force building TensorRT engine sequentially. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_force_sequential_engine_build;
}

/// \brief Ort custom thread creation function
///
/// The function should return a thread handle to be used in onnxruntime thread pools
/// Onnxruntime will throw exception on return value of nullptr or 0, indicating that the function failed to create a thread
typedef OrtCustomCreateThreadFn
    = ffi.Pointer<ffi.NativeFunction<OrtCustomCreateThreadFnFunction>>;
typedef OrtCustomCreateThreadFnFunction = OrtCustomThreadHandle Function(
    ffi.Pointer<ffi.Void> ort_custom_thread_creation_options,
    OrtThreadWorkerFn ort_thread_worker_fn,
    ffi.Pointer<ffi.Void> ort_worker_fn_param);
typedef OrtCustomThreadHandle = ffi.Pointer<OrtCustomHandleType>;

final class OrtCustomHandleType extends ffi.Struct {
  @ffi.Char()
  external int __place_holder;
}

/// \brief Thread work loop function
///
/// Onnxruntime will provide the working loop on custom thread creation
/// Argument is an onnxruntime built-in type which will be provided when thread pool calls OrtCustomCreateThreadFn
typedef OrtThreadWorkerFn
    = ffi.Pointer<ffi.NativeFunction<OrtThreadWorkerFnFunction>>;
typedef OrtThreadWorkerFnFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ort_worker_fn_param);
typedef DartOrtThreadWorkerFnFunction = void Function(
    ffi.Pointer<ffi.Void> ort_worker_fn_param);

/// \brief Custom thread join function
///
/// Onnxruntime thread pool destructor will call the function to join a custom thread.
/// Argument ort_custom_thread_handle is the value returned by OrtCustomCreateThreadFn
typedef OrtCustomJoinThreadFn
    = ffi.Pointer<ffi.NativeFunction<OrtCustomJoinThreadFnFunction>>;
typedef OrtCustomJoinThreadFnFunction = ffi.Void Function(
    OrtCustomThreadHandle ort_custom_thread_handle);
typedef DartOrtCustomJoinThreadFnFunction = void Function(
    OrtCustomThreadHandle ort_custom_thread_handle);

/// \brief MIGraphX Provider Options
///
/// \see OrtApi::SessionOptionsAppendExecutionProvider_MIGraphX
final class OrtMIGraphXProviderOptions extends ffi.Struct {
  /// hip device id.
  @ffi.Int()
  external int device_id;

  /// MIGraphX FP16 precision. Default 0 = false, nonzero = true
  @ffi.Int()
  external int migraphx_fp16_enable;

  /// MIGraphX INT8 precision. Default 0 = false, nonzero = true
  @ffi.Int()
  external int migraphx_int8_enable;

  /// MIGraphx INT8 cal table. Default 0 = false, noznero = true
  @ffi.Int()
  external int migraphx_use_native_calibration_table;

  /// MIGraphx INT8 calibration table name
  external ffi.Pointer<ffi.Char> migraphx_int8_calibration_table_name;

  /// migraphx save compiled model. Default 0 = false, noznero = true
  @ffi.Int()
  external int migraphx_save_compiled_model;

  /// migraphx model path name
  external ffi.Pointer<ffi.Char> migraphx_save_model_path;

  /// migraphx int8 cal table. Default 0 = false, noznero = true
  @ffi.Int()
  external int migraphx_load_compiled_model;

  /// migraphx model path name
  external ffi.Pointer<ffi.Char> migraphx_load_model_path;

  /// migraphx tuned compile  Default = false
  @ffi.Bool()
  external bool migraphx_exhaustive_tune;
}

final class OrtTrainingApi extends ffi.Opaque {}

/// \brief This mimics OrtDevice type constants so they can be returned in the API
enum OrtMemoryInfoDeviceType {
  OrtMemoryInfoDeviceType_CPU(0),
  OrtMemoryInfoDeviceType_GPU(1),
  OrtMemoryInfoDeviceType_FPGA(2);

  final int value;
  const OrtMemoryInfoDeviceType(this.value);

  static OrtMemoryInfoDeviceType fromValue(int value) => switch (value) {
        0 => OrtMemoryInfoDeviceType_CPU,
        1 => OrtMemoryInfoDeviceType_GPU,
        2 => OrtMemoryInfoDeviceType_FPGA,
        _ => throw ArgumentError(
            "Unknown value for OrtMemoryInfoDeviceType: $value"),
      };
}

/// \brief Callback function for RunAsync
///
/// \param[in] user_data User specific data that passed back to the callback
/// \param[out] outputs On succeed, outputs host inference results, on error, the value will be nullptr
/// \param[out] num_outputs Number of outputs, on error, the value will be zero
/// \param[out] status On error, status will provide details
typedef RunAsyncCallbackFn
    = ffi.Pointer<ffi.NativeFunction<RunAsyncCallbackFnFunction>>;
typedef RunAsyncCallbackFnFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.Pointer<OrtValue>> outputs,
    ffi.Size num_outputs,
    OrtStatusPtr status);
typedef DartRunAsyncCallbackFnFunction = void Function(
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.Pointer<OrtValue>> outputs,
    int num_outputs,
    OrtStatusPtr status);

/// Specifies some characteristics of inputs/outputs of custom ops:
/// Specify if the inputs/outputs are one of:
/// 1) Non-optional (input/output must be present in the node)
/// 2) Optional (input/output may be absent in the node)
/// 3) Variadic: A variadic input or output specifies N (i.e., the minimum arity) or more operands.
/// Only the last input or output of a custom op may be marked as variadic.
/// The homogeneity of the variadic input or output determines whether all operands must be of the same
/// tensor element type.
enum OrtCustomOpInputOutputCharacteristic {
  INPUT_OUTPUT_REQUIRED(0),
  INPUT_OUTPUT_OPTIONAL(1),
  INPUT_OUTPUT_VARIADIC(2);

  final int value;
  const OrtCustomOpInputOutputCharacteristic(this.value);

  static OrtCustomOpInputOutputCharacteristic fromValue(int value) =>
      switch (value) {
        0 => INPUT_OUTPUT_REQUIRED,
        1 => INPUT_OUTPUT_OPTIONAL,
        2 => INPUT_OUTPUT_VARIADIC,
        _ => throw ArgumentError(
            "Unknown value for OrtCustomOpInputOutputCharacteristic: $value"),
      };
}

/// \brief The helper interface to get the right version of OrtApi
///
/// Get a pointer to this structure through ::OrtGetApiBase
final class OrtApiBase extends ffi.Struct {
  /// \brief Get a pointer to the requested version of the ::OrtApi
  ///
  /// \param[in] version Must be ::ORT_API_VERSION
  /// \return The ::OrtApi for the version requested, nullptr will be returned if this version is unsupported, for example when using a runtime
  /// older than the version created with this header file.
  ///
  /// One can call GetVersionString() to get the version of the Onnxruntime library for logging
  /// and error reporting purposes.
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Pointer<OrtApi> Function(ffi.Uint32 version)>>
      GetApi;

  /// \brief Returns a null terminated string of the version of the Onnxruntime library (eg: "1.8.1")
  ///
  /// \return UTF-8 encoded version string. Do not deallocate the returned buffer.
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>
      GetVersionString;
}

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int __WORDSIZE = 64;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __API_TO_BE_DEPRECATED_VISIONOS = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_5 = 101405;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_12_4 = 120400;

const int __MAC_12_5 = 120500;

const int __MAC_12_6 = 120600;

const int __MAC_12_7 = 120700;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __MAC_13_4 = 130400;

const int __MAC_13_5 = 130500;

const int __MAC_13_6 = 130600;

const int __MAC_14_0 = 140000;

const int __MAC_14_1 = 140100;

const int __MAC_14_2 = 140200;

const int __MAC_14_3 = 140300;

const int __MAC_14_4 = 140400;

const int __MAC_14_5 = 140500;

const int __MAC_15_0 = 150000;

const int __MAC_15_1 = 150100;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_4 = 140400;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_15_5 = 150500;

const int __IPHONE_15_6 = 150600;

const int __IPHONE_15_7 = 150700;

const int __IPHONE_15_8 = 150800;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __IPHONE_16_5 = 160500;

const int __IPHONE_16_6 = 160600;

const int __IPHONE_16_7 = 160700;

const int __IPHONE_17_0 = 170000;

const int __IPHONE_17_1 = 170100;

const int __IPHONE_17_2 = 170200;

const int __IPHONE_17_3 = 170300;

const int __IPHONE_17_4 = 170400;

const int __IPHONE_17_5 = 170500;

const int __IPHONE_18_0 = 180000;

const int __IPHONE_18_1 = 180100;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_8_6 = 80600;

const int __WATCHOS_8_7 = 80700;

const int __WATCHOS_8_8 = 80800;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int __WATCHOS_9_5 = 90500;

const int __WATCHOS_9_6 = 90600;

const int __WATCHOS_10_0 = 100000;

const int __WATCHOS_10_1 = 100100;

const int __WATCHOS_10_2 = 100200;

const int __WATCHOS_10_3 = 100300;

const int __WATCHOS_10_4 = 100400;

const int __WATCHOS_10_5 = 100500;

const int __WATCHOS_11_0 = 110000;

const int __WATCHOS_11_1 = 110100;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_15_5 = 150500;

const int __TVOS_15_6 = 150600;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __TVOS_16_5 = 160500;

const int __TVOS_16_6 = 160600;

const int __TVOS_17_0 = 170000;

const int __TVOS_17_1 = 170100;

const int __TVOS_17_2 = 170200;

const int __TVOS_17_3 = 170300;

const int __TVOS_17_4 = 170400;

const int __TVOS_17_5 = 170500;

const int __TVOS_18_0 = 180000;

const int __TVOS_18_1 = 180100;

const int __BRIDGEOS_2_0 = 20000;

const int __BRIDGEOS_3_0 = 30000;

const int __BRIDGEOS_3_1 = 30100;

const int __BRIDGEOS_3_4 = 30400;

const int __BRIDGEOS_4_0 = 40000;

const int __BRIDGEOS_4_1 = 40100;

const int __BRIDGEOS_5_0 = 50000;

const int __BRIDGEOS_5_1 = 50100;

const int __BRIDGEOS_5_3 = 50300;

const int __BRIDGEOS_6_0 = 60000;

const int __BRIDGEOS_6_2 = 60200;

const int __BRIDGEOS_6_4 = 60400;

const int __BRIDGEOS_6_5 = 60500;

const int __BRIDGEOS_6_6 = 60600;

const int __BRIDGEOS_7_0 = 70000;

const int __BRIDGEOS_7_1 = 70100;

const int __BRIDGEOS_7_2 = 70200;

const int __BRIDGEOS_7_3 = 70300;

const int __BRIDGEOS_7_4 = 70400;

const int __BRIDGEOS_7_6 = 70600;

const int __BRIDGEOS_8_0 = 80000;

const int __BRIDGEOS_8_1 = 80100;

const int __BRIDGEOS_8_2 = 80200;

const int __BRIDGEOS_8_3 = 80300;

const int __BRIDGEOS_8_4 = 80400;

const int __BRIDGEOS_8_5 = 80500;

const int __BRIDGEOS_9_0 = 90000;

const int __BRIDGEOS_9_1 = 90100;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __DRIVERKIT_22_0 = 220000;

const int __DRIVERKIT_22_4 = 220400;

const int __DRIVERKIT_22_5 = 220500;

const int __DRIVERKIT_22_6 = 220600;

const int __DRIVERKIT_23_0 = 230000;

const int __DRIVERKIT_23_1 = 230100;

const int __DRIVERKIT_23_2 = 230200;

const int __DRIVERKIT_23_3 = 230300;

const int __DRIVERKIT_23_4 = 230400;

const int __DRIVERKIT_23_5 = 230500;

const int __DRIVERKIT_24_0 = 240000;

const int __DRIVERKIT_24_1 = 240100;

const int __VISIONOS_1_0 = 10000;

const int __VISIONOS_1_1 = 10100;

const int __VISIONOS_1_2 = 10200;

const int __VISIONOS_2_0 = 20000;

const int __VISIONOS_2_1 = 20100;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_5 = 101405;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_15_4 = 101504;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_VERSION_11_4 = 110400;

const int MAC_OS_VERSION_11_5 = 110500;

const int MAC_OS_VERSION_11_6 = 110600;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_12_1 = 120100;

const int MAC_OS_VERSION_12_2 = 120200;

const int MAC_OS_VERSION_12_3 = 120300;

const int MAC_OS_VERSION_12_4 = 120400;

const int MAC_OS_VERSION_12_5 = 120500;

const int MAC_OS_VERSION_12_6 = 120600;

const int MAC_OS_VERSION_12_7 = 120700;

const int MAC_OS_VERSION_13_0 = 130000;

const int MAC_OS_VERSION_13_1 = 130100;

const int MAC_OS_VERSION_13_2 = 130200;

const int MAC_OS_VERSION_13_3 = 130300;

const int MAC_OS_VERSION_13_4 = 130400;

const int MAC_OS_VERSION_13_5 = 130500;

const int MAC_OS_VERSION_13_6 = 130600;

const int MAC_OS_VERSION_14_0 = 140000;

const int MAC_OS_VERSION_14_1 = 140100;

const int MAC_OS_VERSION_14_2 = 140200;

const int MAC_OS_VERSION_14_3 = 140300;

const int MAC_OS_VERSION_14_4 = 140400;

const int MAC_OS_VERSION_14_5 = 140500;

const int MAC_OS_VERSION_15_0 = 150000;

const int MAC_OS_VERSION_15_1 = 150100;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 150000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 150100;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _ARM_SIGNAL_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int USER_ADDR_NULL = 0;

const int __DARWIN_OPAQUE_ARM_THREAD_STATE64 = 0;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_V6 = 6;

const int RUSAGE_INFO_CURRENT = 6;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9;

const int IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY = 10;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT = 0;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON = 1;

const int IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT = 0;

const int IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int BYTE_ORDER = 1234;

const int NULL = 0;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int ORT_API_VERSION = 21;

const String ORT_FILE =
    '/var/folders/d8/p77zrhr12g1_xc5y4bl_0rmh0000gn/T/SaOUtJ/temp_for_macros.hpp';
